generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url = "***"
}

model Transaction {
  id            String   @id @default(uuid())
  uid           String
  categoryId    String   @map("category_id")
  comment       String?
  integerAmount Int      @map("integer_amount")
  time          DateTime
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  User     User     @relation(fields: [uid], references: [id])
  Category Category @relation(fields: [categoryId], references: [id])

  @@map(name: "transactions")
}

model User {
  id               String   @id @default(uuid())
  displayName      String?  @map("display_name")
  email            String?  @unique
  emailVerified    Boolean  @default(false) @map("email_verified")
  password         String?
  googleId         String?  @unique @map("google_id")
  photoUrl         String?  @map("photo_url")
  tokenVersion     Int      @default(1) @map("token_version")
  disabled         Boolean  @default(false)
  isAdmin          Boolean  @default(false) @map("is_admin")
  themeColor       String?  @map("theme_color")
  themeMode        String?  @map("theme_mode")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  stripeCustomerId String?  @map("stripe_customer_id")

  Transactions Transaction[]
  Categories   Category[]
  Budgets      Budget[]
  Feedback     Feedback[]
  Profile      Profile?

  Log Log[]
  @@map(name: "users")
}

model Profile {
  id          String  @id
  uid         String
  displayName String? @map("display_name")
  photoUrl    String? @map("photo_url")
  themeColor  String? @map("theme_color")
  themeMode   String? @map("theme_mode")

  User User @relation(fields: [uid], references: [id])
  @@map(name: "profiles")
}

model Budget {
  id            String   @id @default(uuid())
  uid           String
  label         String?
  integerAmount Int      @map("integer_amount")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  periodMonths  Int      @default(1) @map("period_months")

  BudgetCategoryInclusions BudgetCategoryInclusion[]

  User User @relation(fields: [uid], references: [id])

  @@map(name: "budgets")
}

model BudgetCategoryInclusion {
  budgetId   String @map("budget_id")
  categoryId String @map("category_id")

  Budget   Budget   @relation(fields: [budgetId], references: [id])
  Category Category @relation(fields: [categoryId], references: [id])

  @@id([categoryId, budgetId])
}

model Category {
  id        String   @id @default(uuid())
  uid       String
  value     String
  icon      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Transactions             Transaction[]
  BudgetCategoryInclusions BudgetCategoryInclusion[]

  User User @relation(fields: [uid], references: [id])

  @@unique([uid, value], name: "unique_uid_value")
  @@unique([uid, id], name: "unique_uid_id")
  @@map(name: "categories")
}

model Feedback {
  id      String  @id @default(uuid())
  uid     String
  message String?

  User User @relation(fields: [uid], references: [id])
}

model Log {
  id         String   @id @default(uuid())
  uid        String?
  type       String
  message    String
  data       String
  stackTrace String   @map("stack_trace")
  device     String
  timestamp  Int
  timestring String
  createdAt  DateTime @default(now()) @map("created_at")
  href       String

  User User? @relation(fields: [uid], references: [id])
}
