
/**
 * Client
**/

import * as runtime from './runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: string
  email: string | null
  emailVerified: boolean
  password: string | null
  tokenVersion: number
  disabled: boolean
  isAdmin: boolean
  googleId: string | null
  stripeCustomerId: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Profile
 * 
 */
export type Profile = {
  uid: string
  displayName: string | null
  photoUrl: string | null
  googlePhotoUrl: string | null
  themeColor: string | null
  themeMode: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Transaction
 * 
 */
export type Transaction = {
  id: string
  uid: string
  categoryId: string
  comment: string | null
  integerAmount: number
  time: Date
  createdAt: Date
  updatedAt: Date
  scheduleId: string | null
}

/**
 * Model TransactionSchedule
 * 
 */
export type TransactionSchedule = {
  id: string
  uid: string
  categoryId: string
  comment: string | null
  integerAmount: number
  intervalType: IntervalType
  intervalEvery: number
  firstOccurrence: Date
  occurrences: number | null
  createdAt: Date
  updatedAt: Date
  latestCreatedOccurrence: Date | null
}

/**
 * Model Budget
 * 
 */
export type Budget = {
  id: string
  uid: string
  label: string | null
  integerAmount: number
  createdAt: Date
  updatedAt: Date
  periodMonths: number
}

/**
 * Model BudgetCategoryInclusion
 * 
 */
export type BudgetCategoryInclusion = {
  budgetId: string
  categoryId: string
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: string
  uid: string
  value: string
  icon: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Feedback
 * 
 */
export type Feedback = {
  id: string
  uid: string
  message: string | null
}

/**
 * Model Log
 * 
 */
export type Log = {
  id: string
  uid: string | null
  type: string
  message: string
  data: string
  stackTrace: string
  device: string
  timestamp: number
  timestring: string
  createdAt: Date
  href: string
}

/**
 * Model Config
 * 
 */
export type Config = {
  key: string
  value: string
}

/**
 * Model PremiumSubscription
 * 
 */
export type PremiumSubscription = {
  id: string
  uid: string
  currentPeriodEnd: Date | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model PremiumPrice
 * 
 */
export type PremiumPrice = {
  id: string
  unitAmount: number | null
  productId: string
  active: boolean
  currency: string
  nickname: string | null
  type: string
  recurringInterval: string | null
  recurringIntervalCount: number | null
  createdAt: Date
  updatedAt: Date
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const IntervalType: {
  DAY: 'DAY',
  WEEK: 'WEEK',
  MONTH: 'MONTH',
  YEAR: 'YEAR'
};

export type IntervalType = (typeof IntervalType)[keyof typeof IntervalType]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<GlobalReject>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject>;

  /**
   * `prisma.transactionSchedule`: Exposes CRUD operations for the **TransactionSchedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionSchedules
    * const transactionSchedules = await prisma.transactionSchedule.findMany()
    * ```
    */
  get transactionSchedule(): Prisma.TransactionScheduleDelegate<GlobalReject>;

  /**
   * `prisma.budget`: Exposes CRUD operations for the **Budget** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Budgets
    * const budgets = await prisma.budget.findMany()
    * ```
    */
  get budget(): Prisma.BudgetDelegate<GlobalReject>;

  /**
   * `prisma.budgetCategoryInclusion`: Exposes CRUD operations for the **BudgetCategoryInclusion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BudgetCategoryInclusions
    * const budgetCategoryInclusions = await prisma.budgetCategoryInclusion.findMany()
    * ```
    */
  get budgetCategoryInclusion(): Prisma.BudgetCategoryInclusionDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<GlobalReject>;

  /**
   * `prisma.log`: Exposes CRUD operations for the **Log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Logs
    * const logs = await prisma.log.findMany()
    * ```
    */
  get log(): Prisma.LogDelegate<GlobalReject>;

  /**
   * `prisma.config`: Exposes CRUD operations for the **Config** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Configs
    * const configs = await prisma.config.findMany()
    * ```
    */
  get config(): Prisma.ConfigDelegate<GlobalReject>;

  /**
   * `prisma.premiumSubscription`: Exposes CRUD operations for the **PremiumSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PremiumSubscriptions
    * const premiumSubscriptions = await prisma.premiumSubscription.findMany()
    * ```
    */
  get premiumSubscription(): Prisma.PremiumSubscriptionDelegate<GlobalReject>;

  /**
   * `prisma.premiumPrice`: Exposes CRUD operations for the **PremiumPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PremiumPrices
    * const premiumPrices = await prisma.premiumPrice.findMany()
    * ```
    */
  get premiumPrice(): Prisma.PremiumPriceDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Profile: 'Profile',
    Transaction: 'Transaction',
    TransactionSchedule: 'TransactionSchedule',
    Budget: 'Budget',
    BudgetCategoryInclusion: 'BudgetCategoryInclusion',
    Category: 'Category',
    Feedback: 'Feedback',
    Log: 'Log',
    Config: 'Config',
    PremiumSubscription: 'PremiumSubscription',
    PremiumPrice: 'PremiumPrice'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    postgresql?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    Transactions: number
    Categories: number
    Budgets: number
    Feedback: number
    Log: number
    TransactionSchedule: number
  }

  export type UserCountOutputTypeSelect = {
    Transactions?: boolean
    Categories?: boolean
    Budgets?: boolean
    Feedback?: boolean
    Log?: boolean
    TransactionSchedule?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type TransactionScheduleCountOutputType
   */


  export type TransactionScheduleCountOutputType = {
    Transactions: number
  }

  export type TransactionScheduleCountOutputTypeSelect = {
    Transactions?: boolean
  }

  export type TransactionScheduleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TransactionScheduleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TransactionScheduleCountOutputType
    : S extends undefined
    ? never
    : S extends TransactionScheduleCountOutputTypeArgs
    ?'include' extends U
    ? TransactionScheduleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TransactionScheduleCountOutputType ? TransactionScheduleCountOutputType[P] : never
  } 
    : TransactionScheduleCountOutputType
  : TransactionScheduleCountOutputType




  // Custom InputTypes

  /**
   * TransactionScheduleCountOutputType without action
   */
  export type TransactionScheduleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TransactionScheduleCountOutputType
     * 
    **/
    select?: TransactionScheduleCountOutputTypeSelect | null
  }



  /**
   * Count Type BudgetCountOutputType
   */


  export type BudgetCountOutputType = {
    BudgetCategoryInclusions: number
  }

  export type BudgetCountOutputTypeSelect = {
    BudgetCategoryInclusions?: boolean
  }

  export type BudgetCountOutputTypeGetPayload<
    S extends boolean | null | undefined | BudgetCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? BudgetCountOutputType
    : S extends undefined
    ? never
    : S extends BudgetCountOutputTypeArgs
    ?'include' extends U
    ? BudgetCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof BudgetCountOutputType ? BudgetCountOutputType[P] : never
  } 
    : BudgetCountOutputType
  : BudgetCountOutputType




  // Custom InputTypes

  /**
   * BudgetCountOutputType without action
   */
  export type BudgetCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the BudgetCountOutputType
     * 
    **/
    select?: BudgetCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    Transactions: number
    BudgetCategoryInclusions: number
    TransactionSchedule: number
  }

  export type CategoryCountOutputTypeSelect = {
    Transactions?: boolean
    BudgetCategoryInclusions?: boolean
    TransactionSchedule?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<
    S extends boolean | null | undefined | CategoryCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? CategoryCountOutputType
    : S extends undefined
    ? never
    : S extends CategoryCountOutputTypeArgs
    ?'include' extends U
    ? CategoryCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
    : CategoryCountOutputType
  : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    tokenVersion: number | null
  }

  export type UserSumAggregateOutputType = {
    tokenVersion: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    emailVerified: boolean | null
    password: string | null
    tokenVersion: number | null
    disabled: boolean | null
    isAdmin: boolean | null
    googleId: string | null
    stripeCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    emailVerified: boolean | null
    password: string | null
    tokenVersion: number | null
    disabled: boolean | null
    isAdmin: boolean | null
    googleId: string | null
    stripeCustomerId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    emailVerified: number
    password: number
    tokenVersion: number
    disabled: number
    isAdmin: number
    googleId: number
    stripeCustomerId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    tokenVersion?: true
  }

  export type UserSumAggregateInputType = {
    tokenVersion?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    emailVerified?: true
    password?: true
    tokenVersion?: true
    disabled?: true
    isAdmin?: true
    googleId?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    emailVerified?: true
    password?: true
    tokenVersion?: true
    disabled?: true
    isAdmin?: true
    googleId?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    emailVerified?: true
    password?: true
    tokenVersion?: true
    disabled?: true
    isAdmin?: true
    googleId?: true
    stripeCustomerId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    email: string | null
    emailVerified: boolean
    password: string | null
    tokenVersion: number
    disabled: boolean
    isAdmin: boolean
    googleId: string | null
    stripeCustomerId: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    emailVerified?: boolean
    password?: boolean
    tokenVersion?: boolean
    disabled?: boolean
    isAdmin?: boolean
    googleId?: boolean
    stripeCustomerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Transactions?: boolean | TransactionFindManyArgs
    Categories?: boolean | CategoryFindManyArgs
    Budgets?: boolean | BudgetFindManyArgs
    Feedback?: boolean | FeedbackFindManyArgs
    Profile?: boolean | ProfileArgs
    Log?: boolean | LogFindManyArgs
    TransactionSchedule?: boolean | TransactionScheduleFindManyArgs
    Subscription?: boolean | PremiumSubscriptionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    Transactions?: boolean | TransactionFindManyArgs
    Categories?: boolean | CategoryFindManyArgs
    Budgets?: boolean | BudgetFindManyArgs
    Feedback?: boolean | FeedbackFindManyArgs
    Profile?: boolean | ProfileArgs
    Log?: boolean | LogFindManyArgs
    TransactionSchedule?: boolean | TransactionScheduleFindManyArgs
    Subscription?: boolean | PremiumSubscriptionArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Transactions' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends 'Categories' ? Array < CategoryGetPayload<S['include'][P]>>  :
        P extends 'Budgets' ? Array < BudgetGetPayload<S['include'][P]>>  :
        P extends 'Feedback' ? Array < FeedbackGetPayload<S['include'][P]>>  :
        P extends 'Profile' ? ProfileGetPayload<S['include'][P]> | null :
        P extends 'Log' ? Array < LogGetPayload<S['include'][P]>>  :
        P extends 'TransactionSchedule' ? Array < TransactionScheduleGetPayload<S['include'][P]>>  :
        P extends 'Subscription' ? PremiumSubscriptionGetPayload<S['include'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Transactions' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends 'Categories' ? Array < CategoryGetPayload<S['select'][P]>>  :
        P extends 'Budgets' ? Array < BudgetGetPayload<S['select'][P]>>  :
        P extends 'Feedback' ? Array < FeedbackGetPayload<S['select'][P]>>  :
        P extends 'Profile' ? ProfileGetPayload<S['select'][P]> | null :
        P extends 'Log' ? Array < LogGetPayload<S['select'][P]>>  :
        P extends 'TransactionSchedule' ? Array < TransactionScheduleGetPayload<S['select'][P]>>  :
        P extends 'Subscription' ? PremiumSubscriptionGetPayload<S['select'][P]> | null :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    Categories<T extends CategoryFindManyArgs = {}>(args?: Subset<T, CategoryFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>;

    Budgets<T extends BudgetFindManyArgs = {}>(args?: Subset<T, BudgetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Budget>>, PrismaPromise<Array<BudgetGetPayload<T>>>>;

    Feedback<T extends FeedbackFindManyArgs = {}>(args?: Subset<T, FeedbackFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Feedback>>, PrismaPromise<Array<FeedbackGetPayload<T>>>>;

    Profile<T extends ProfileArgs = {}>(args?: Subset<T, ProfileArgs>): CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>;

    Log<T extends LogFindManyArgs = {}>(args?: Subset<T, LogFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Log>>, PrismaPromise<Array<LogGetPayload<T>>>>;

    TransactionSchedule<T extends TransactionScheduleFindManyArgs = {}>(args?: Subset<T, TransactionScheduleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TransactionSchedule>>, PrismaPromise<Array<TransactionScheduleGetPayload<T>>>>;

    Subscription<T extends PremiumSubscriptionArgs = {}>(args?: Subset<T, PremiumSubscriptionArgs>): CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription | null >, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Profile
   */


  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    uid: string | null
    displayName: string | null
    photoUrl: string | null
    googlePhotoUrl: string | null
    themeColor: string | null
    themeMode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileMaxAggregateOutputType = {
    uid: string | null
    displayName: string | null
    photoUrl: string | null
    googlePhotoUrl: string | null
    themeColor: string | null
    themeMode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProfileCountAggregateOutputType = {
    uid: number
    displayName: number
    photoUrl: number
    googlePhotoUrl: number
    themeColor: number
    themeMode: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    uid?: true
    displayName?: true
    photoUrl?: true
    googlePhotoUrl?: true
    themeColor?: true
    themeMode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileMaxAggregateInputType = {
    uid?: true
    displayName?: true
    photoUrl?: true
    googlePhotoUrl?: true
    themeColor?: true
    themeMode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProfileCountAggregateInputType = {
    uid?: true
    displayName?: true
    photoUrl?: true
    googlePhotoUrl?: true
    themeColor?: true
    themeMode?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProfileAggregateArgs = {
    /**
     * Filter which Profile to aggregate.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs = {
    where?: ProfileWhereInput
    orderBy?: Enumerable<ProfileOrderByWithAggregationInput>
    by: Array<ProfileScalarFieldEnum>
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }


  export type ProfileGroupByOutputType = {
    uid: string
    displayName: string | null
    photoUrl: string | null
    googlePhotoUrl: string | null
    themeColor: string | null
    themeMode: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect = {
    uid?: boolean
    displayName?: boolean
    photoUrl?: boolean
    googlePhotoUrl?: boolean
    themeColor?: boolean
    themeMode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserArgs
  }

  export type ProfileInclude = {
    User?: boolean | UserArgs
  }

  export type ProfileGetPayload<
    S extends boolean | null | undefined | ProfileArgs,
    U = keyof S
      > = S extends true
        ? Profile
    : S extends undefined
    ? never
    : S extends ProfileArgs | ProfileFindManyArgs
    ?'include' extends U
    ? Profile  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Profile ? Profile[P] : never
  } 
    : Profile
  : Profile


  type ProfileCountArgs = Merge<
    Omit<ProfileFindManyArgs, 'select' | 'include'> & {
      select?: ProfileCountAggregateInputType | true
    }
  >

  export interface ProfileDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProfileFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProfileFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProfileFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProfileFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Profile'> extends True ? CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>> : CheckSelect<T, Prisma__ProfileClient<Profile | null >, Prisma__ProfileClient<ProfileGetPayload<T> | null >>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `uid`
     * const profileWithUidOnly = await prisma.profile.findMany({ select: { uid: true } })
     * 
    **/
    findMany<T extends ProfileFindManyArgs>(
      args?: SelectSubset<T, ProfileFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Profile>>, PrismaPromise<Array<ProfileGetPayload<T>>>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
    **/
    create<T extends ProfileCreateArgs>(
      args: SelectSubset<T, ProfileCreateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Create many Profiles.
     *     @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     *     @example
     *     // Create many Profiles
     *     const profile = await prisma.profile.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProfileCreateManyArgs>(
      args?: SelectSubset<T, ProfileCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
    **/
    delete<T extends ProfileDeleteArgs>(
      args: SelectSubset<T, ProfileDeleteArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProfileUpdateArgs>(
      args: SelectSubset<T, ProfileUpdateArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProfileDeleteManyArgs>(
      args?: SelectSubset<T, ProfileDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProfileUpdateManyArgs>(
      args: SelectSubset<T, ProfileUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
    **/
    upsert<T extends ProfileUpsertArgs>(
      args: SelectSubset<T, ProfileUpsertArgs>
    ): CheckSelect<T, Prisma__ProfileClient<Profile>, Prisma__ProfileClient<ProfileGetPayload<T>>>

    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProfileClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Throw an Error if a Profile can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Profile to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     * 
    **/
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter, which Profiles to fetch.
     * 
    **/
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     * 
    **/
    orderBy?: Enumerable<ProfileOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     * 
    **/
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProfileScalarFieldEnum>
  }


  /**
   * Profile create
   */
  export type ProfileCreateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to create a Profile.
     * 
    **/
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }


  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs = {
    /**
     * The data used to create many Profiles.
     * 
    **/
    data: Enumerable<ProfileCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Profile update
   */
  export type ProfileUpdateArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The data needed to update a Profile.
     * 
    **/
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs = {
    /**
     * The data used to update Profiles.
     * 
    **/
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * The filter to search for the Profile to update in case it exists.
     * 
    **/
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     * 
    **/
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }


  /**
   * Profile delete
   */
  export type ProfileDeleteArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
    /**
     * Filter which Profile to delete.
     * 
    **/
    where: ProfileWhereUniqueInput
  }


  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs = {
    /**
     * Filter which Profiles to delete
     * 
    **/
    where?: ProfileWhereInput
  }


  /**
   * Profile without action
   */
  export type ProfileArgs = {
    /**
     * Select specific fields to fetch from the Profile
     * 
    **/
    select?: ProfileSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProfileInclude | null
  }



  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    integerAmount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    integerAmount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    uid: string | null
    categoryId: string | null
    comment: string | null
    integerAmount: number | null
    time: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    scheduleId: string | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    categoryId: string | null
    comment: string | null
    integerAmount: number | null
    time: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    scheduleId: string | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    uid: number
    categoryId: number
    comment: number
    integerAmount: number
    time: number
    createdAt: number
    updatedAt: number
    scheduleId: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    integerAmount?: true
  }

  export type TransactionSumAggregateInputType = {
    integerAmount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    uid?: true
    categoryId?: true
    comment?: true
    integerAmount?: true
    time?: true
    createdAt?: true
    updatedAt?: true
    scheduleId?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    uid?: true
    categoryId?: true
    comment?: true
    integerAmount?: true
    time?: true
    createdAt?: true
    updatedAt?: true
    scheduleId?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    uid?: true
    categoryId?: true
    comment?: true
    integerAmount?: true
    time?: true
    createdAt?: true
    updatedAt?: true
    scheduleId?: true
    _all?: true
  }

  export type TransactionAggregateArgs = {
    /**
     * Filter which Transaction to aggregate.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: Array<TransactionScalarFieldEnum>
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    id: string
    uid: string
    categoryId: string
    comment: string | null
    integerAmount: number
    time: Date
    createdAt: Date
    updatedAt: Date
    scheduleId: string | null
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect = {
    id?: boolean
    uid?: boolean
    categoryId?: boolean
    comment?: boolean
    integerAmount?: boolean
    time?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    scheduleId?: boolean
    User?: boolean | UserArgs
    Category?: boolean | CategoryArgs
    Schedule?: boolean | TransactionScheduleArgs
  }

  export type TransactionInclude = {
    User?: boolean | UserArgs
    Category?: boolean | CategoryArgs
    Schedule?: boolean | TransactionScheduleArgs
  }

  export type TransactionGetPayload<
    S extends boolean | null | undefined | TransactionArgs,
    U = keyof S
      > = S extends true
        ? Transaction
    : S extends undefined
    ? never
    : S extends TransactionArgs | TransactionFindManyArgs
    ?'include' extends U
    ? Transaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Category' ? CategoryGetPayload<S['include'][P]> :
        P extends 'Schedule' ? TransactionScheduleGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Category' ? CategoryGetPayload<S['select'][P]> :
        P extends 'Schedule' ? TransactionScheduleGetPayload<S['select'][P]> | null :  P extends keyof Transaction ? Transaction[P] : never
  } 
    : Transaction
  : Transaction


  type TransactionCountArgs = Merge<
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }
  >

  export interface TransactionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs>(
      args?: SelectSubset<T, TransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs>(
      args: SelectSubset<T, TransactionCreateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs>(
      args?: SelectSubset<T, TransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs>(
      args: SelectSubset<T, TransactionDeleteArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs>(
      args: SelectSubset<T, TransactionUpdateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs>(
      args?: SelectSubset<T, TransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs>(
      args: SelectSubset<T, TransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs>(
      args: SelectSubset<T, TransactionUpsertArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    Schedule<T extends TransactionScheduleArgs = {}>(args?: Subset<T, TransactionScheduleArgs>): CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule | null >, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Throw an Error if a Transaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Throw an Error if a Transaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     * 
    **/
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter, which Transactions to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to create a Transaction.
     * 
    **/
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs = {
    /**
     * The data used to create many Transactions.
     * 
    **/
    data: Enumerable<TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to update a Transaction.
     * 
    **/
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs = {
    /**
     * The data used to update Transactions.
     * 
    **/
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     * 
    **/
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     * 
    **/
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter which Transaction to delete.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs = {
    /**
     * Filter which Transactions to delete
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction without action
   */
  export type TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
  }



  /**
   * Model TransactionSchedule
   */


  export type AggregateTransactionSchedule = {
    _count: TransactionScheduleCountAggregateOutputType | null
    _avg: TransactionScheduleAvgAggregateOutputType | null
    _sum: TransactionScheduleSumAggregateOutputType | null
    _min: TransactionScheduleMinAggregateOutputType | null
    _max: TransactionScheduleMaxAggregateOutputType | null
  }

  export type TransactionScheduleAvgAggregateOutputType = {
    integerAmount: number | null
    intervalEvery: number | null
    occurrences: number | null
  }

  export type TransactionScheduleSumAggregateOutputType = {
    integerAmount: number | null
    intervalEvery: number | null
    occurrences: number | null
  }

  export type TransactionScheduleMinAggregateOutputType = {
    id: string | null
    uid: string | null
    categoryId: string | null
    comment: string | null
    integerAmount: number | null
    intervalType: IntervalType | null
    intervalEvery: number | null
    firstOccurrence: Date | null
    occurrences: number | null
    createdAt: Date | null
    updatedAt: Date | null
    latestCreatedOccurrence: Date | null
  }

  export type TransactionScheduleMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    categoryId: string | null
    comment: string | null
    integerAmount: number | null
    intervalType: IntervalType | null
    intervalEvery: number | null
    firstOccurrence: Date | null
    occurrences: number | null
    createdAt: Date | null
    updatedAt: Date | null
    latestCreatedOccurrence: Date | null
  }

  export type TransactionScheduleCountAggregateOutputType = {
    id: number
    uid: number
    categoryId: number
    comment: number
    integerAmount: number
    intervalType: number
    intervalEvery: number
    firstOccurrence: number
    occurrences: number
    createdAt: number
    updatedAt: number
    latestCreatedOccurrence: number
    _all: number
  }


  export type TransactionScheduleAvgAggregateInputType = {
    integerAmount?: true
    intervalEvery?: true
    occurrences?: true
  }

  export type TransactionScheduleSumAggregateInputType = {
    integerAmount?: true
    intervalEvery?: true
    occurrences?: true
  }

  export type TransactionScheduleMinAggregateInputType = {
    id?: true
    uid?: true
    categoryId?: true
    comment?: true
    integerAmount?: true
    intervalType?: true
    intervalEvery?: true
    firstOccurrence?: true
    occurrences?: true
    createdAt?: true
    updatedAt?: true
    latestCreatedOccurrence?: true
  }

  export type TransactionScheduleMaxAggregateInputType = {
    id?: true
    uid?: true
    categoryId?: true
    comment?: true
    integerAmount?: true
    intervalType?: true
    intervalEvery?: true
    firstOccurrence?: true
    occurrences?: true
    createdAt?: true
    updatedAt?: true
    latestCreatedOccurrence?: true
  }

  export type TransactionScheduleCountAggregateInputType = {
    id?: true
    uid?: true
    categoryId?: true
    comment?: true
    integerAmount?: true
    intervalType?: true
    intervalEvery?: true
    firstOccurrence?: true
    occurrences?: true
    createdAt?: true
    updatedAt?: true
    latestCreatedOccurrence?: true
    _all?: true
  }

  export type TransactionScheduleAggregateArgs = {
    /**
     * Filter which TransactionSchedule to aggregate.
     * 
    **/
    where?: TransactionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSchedules to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransactionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSchedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSchedules.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionSchedules
    **/
    _count?: true | TransactionScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionScheduleMaxAggregateInputType
  }

  export type GetTransactionScheduleAggregateType<T extends TransactionScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionSchedule[P]>
      : GetScalarType<T[P], AggregateTransactionSchedule[P]>
  }




  export type TransactionScheduleGroupByArgs = {
    where?: TransactionScheduleWhereInput
    orderBy?: Enumerable<TransactionScheduleOrderByWithAggregationInput>
    by: Array<TransactionScheduleScalarFieldEnum>
    having?: TransactionScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionScheduleCountAggregateInputType | true
    _avg?: TransactionScheduleAvgAggregateInputType
    _sum?: TransactionScheduleSumAggregateInputType
    _min?: TransactionScheduleMinAggregateInputType
    _max?: TransactionScheduleMaxAggregateInputType
  }


  export type TransactionScheduleGroupByOutputType = {
    id: string
    uid: string
    categoryId: string
    comment: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery: number
    firstOccurrence: Date
    occurrences: number | null
    createdAt: Date
    updatedAt: Date
    latestCreatedOccurrence: Date | null
    _count: TransactionScheduleCountAggregateOutputType | null
    _avg: TransactionScheduleAvgAggregateOutputType | null
    _sum: TransactionScheduleSumAggregateOutputType | null
    _min: TransactionScheduleMinAggregateOutputType | null
    _max: TransactionScheduleMaxAggregateOutputType | null
  }

  type GetTransactionScheduleGroupByPayload<T extends TransactionScheduleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TransactionScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionScheduleGroupByOutputType[P]>
        }
      >
    >


  export type TransactionScheduleSelect = {
    id?: boolean
    uid?: boolean
    categoryId?: boolean
    comment?: boolean
    integerAmount?: boolean
    intervalType?: boolean
    intervalEvery?: boolean
    firstOccurrence?: boolean
    occurrences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    latestCreatedOccurrence?: boolean
    User?: boolean | UserArgs
    Category?: boolean | CategoryArgs
    Transactions?: boolean | TransactionFindManyArgs
    _count?: boolean | TransactionScheduleCountOutputTypeArgs
  }

  export type TransactionScheduleInclude = {
    User?: boolean | UserArgs
    Category?: boolean | CategoryArgs
    Transactions?: boolean | TransactionFindManyArgs
    _count?: boolean | TransactionScheduleCountOutputTypeArgs
  }

  export type TransactionScheduleGetPayload<
    S extends boolean | null | undefined | TransactionScheduleArgs,
    U = keyof S
      > = S extends true
        ? TransactionSchedule
    : S extends undefined
    ? never
    : S extends TransactionScheduleArgs | TransactionScheduleFindManyArgs
    ?'include' extends U
    ? TransactionSchedule  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends 'Category' ? CategoryGetPayload<S['include'][P]> :
        P extends 'Transactions' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends '_count' ? TransactionScheduleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends 'Category' ? CategoryGetPayload<S['select'][P]> :
        P extends 'Transactions' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends '_count' ? TransactionScheduleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof TransactionSchedule ? TransactionSchedule[P] : never
  } 
    : TransactionSchedule
  : TransactionSchedule


  type TransactionScheduleCountArgs = Merge<
    Omit<TransactionScheduleFindManyArgs, 'select' | 'include'> & {
      select?: TransactionScheduleCountAggregateInputType | true
    }
  >

  export interface TransactionScheduleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one TransactionSchedule that matches the filter.
     * @param {TransactionScheduleFindUniqueArgs} args - Arguments to find a TransactionSchedule
     * @example
     * // Get one TransactionSchedule
     * const transactionSchedule = await prisma.transactionSchedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionScheduleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionScheduleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'TransactionSchedule'> extends True ? CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule>, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T>>> : CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule | null >, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T> | null >>

    /**
     * Find the first TransactionSchedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionScheduleFindFirstArgs} args - Arguments to find a TransactionSchedule
     * @example
     * // Get one TransactionSchedule
     * const transactionSchedule = await prisma.transactionSchedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionScheduleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionScheduleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'TransactionSchedule'> extends True ? CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule>, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T>>> : CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule | null >, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T> | null >>

    /**
     * Find zero or more TransactionSchedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionScheduleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionSchedules
     * const transactionSchedules = await prisma.transactionSchedule.findMany()
     * 
     * // Get first 10 TransactionSchedules
     * const transactionSchedules = await prisma.transactionSchedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionScheduleWithIdOnly = await prisma.transactionSchedule.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionScheduleFindManyArgs>(
      args?: SelectSubset<T, TransactionScheduleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<TransactionSchedule>>, PrismaPromise<Array<TransactionScheduleGetPayload<T>>>>

    /**
     * Create a TransactionSchedule.
     * @param {TransactionScheduleCreateArgs} args - Arguments to create a TransactionSchedule.
     * @example
     * // Create one TransactionSchedule
     * const TransactionSchedule = await prisma.transactionSchedule.create({
     *   data: {
     *     // ... data to create a TransactionSchedule
     *   }
     * })
     * 
    **/
    create<T extends TransactionScheduleCreateArgs>(
      args: SelectSubset<T, TransactionScheduleCreateArgs>
    ): CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule>, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T>>>

    /**
     * Create many TransactionSchedules.
     *     @param {TransactionScheduleCreateManyArgs} args - Arguments to create many TransactionSchedules.
     *     @example
     *     // Create many TransactionSchedules
     *     const transactionSchedule = await prisma.transactionSchedule.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionScheduleCreateManyArgs>(
      args?: SelectSubset<T, TransactionScheduleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a TransactionSchedule.
     * @param {TransactionScheduleDeleteArgs} args - Arguments to delete one TransactionSchedule.
     * @example
     * // Delete one TransactionSchedule
     * const TransactionSchedule = await prisma.transactionSchedule.delete({
     *   where: {
     *     // ... filter to delete one TransactionSchedule
     *   }
     * })
     * 
    **/
    delete<T extends TransactionScheduleDeleteArgs>(
      args: SelectSubset<T, TransactionScheduleDeleteArgs>
    ): CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule>, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T>>>

    /**
     * Update one TransactionSchedule.
     * @param {TransactionScheduleUpdateArgs} args - Arguments to update one TransactionSchedule.
     * @example
     * // Update one TransactionSchedule
     * const transactionSchedule = await prisma.transactionSchedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionScheduleUpdateArgs>(
      args: SelectSubset<T, TransactionScheduleUpdateArgs>
    ): CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule>, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T>>>

    /**
     * Delete zero or more TransactionSchedules.
     * @param {TransactionScheduleDeleteManyArgs} args - Arguments to filter TransactionSchedules to delete.
     * @example
     * // Delete a few TransactionSchedules
     * const { count } = await prisma.transactionSchedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionScheduleDeleteManyArgs>(
      args?: SelectSubset<T, TransactionScheduleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionSchedules
     * const transactionSchedule = await prisma.transactionSchedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionScheduleUpdateManyArgs>(
      args: SelectSubset<T, TransactionScheduleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one TransactionSchedule.
     * @param {TransactionScheduleUpsertArgs} args - Arguments to update or create a TransactionSchedule.
     * @example
     * // Update or create a TransactionSchedule
     * const transactionSchedule = await prisma.transactionSchedule.upsert({
     *   create: {
     *     // ... data to create a TransactionSchedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionSchedule we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionScheduleUpsertArgs>(
      args: SelectSubset<T, TransactionScheduleUpsertArgs>
    ): CheckSelect<T, Prisma__TransactionScheduleClient<TransactionSchedule>, Prisma__TransactionScheduleClient<TransactionScheduleGetPayload<T>>>

    /**
     * Count the number of TransactionSchedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionScheduleCountArgs} args - Arguments to filter TransactionSchedules to count.
     * @example
     * // Count the number of TransactionSchedules
     * const count = await prisma.transactionSchedule.count({
     *   where: {
     *     // ... the filter for the TransactionSchedules we want to count
     *   }
     * })
    **/
    count<T extends TransactionScheduleCountArgs>(
      args?: Subset<T, TransactionScheduleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionScheduleAggregateArgs>(args: Subset<T, TransactionScheduleAggregateArgs>): PrismaPromise<GetTransactionScheduleAggregateType<T>>

    /**
     * Group by TransactionSchedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionScheduleGroupByArgs['orderBy'] }
        : { orderBy?: TransactionScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionScheduleGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionSchedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionScheduleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    Category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    Transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * TransactionSchedule findUnique
   */
  export type TransactionScheduleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * Throw an Error if a TransactionSchedule can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TransactionSchedule to fetch.
     * 
    **/
    where: TransactionScheduleWhereUniqueInput
  }


  /**
   * TransactionSchedule findFirst
   */
  export type TransactionScheduleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * Throw an Error if a TransactionSchedule can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which TransactionSchedule to fetch.
     * 
    **/
    where?: TransactionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSchedules to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionSchedules.
     * 
    **/
    cursor?: TransactionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSchedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSchedules.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionSchedules.
     * 
    **/
    distinct?: Enumerable<TransactionScheduleScalarFieldEnum>
  }


  /**
   * TransactionSchedule findMany
   */
  export type TransactionScheduleFindManyArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * Filter, which TransactionSchedules to fetch.
     * 
    **/
    where?: TransactionScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSchedules to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionScheduleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionSchedules.
     * 
    **/
    cursor?: TransactionScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSchedules from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSchedules.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransactionScheduleScalarFieldEnum>
  }


  /**
   * TransactionSchedule create
   */
  export type TransactionScheduleCreateArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * The data needed to create a TransactionSchedule.
     * 
    **/
    data: XOR<TransactionScheduleCreateInput, TransactionScheduleUncheckedCreateInput>
  }


  /**
   * TransactionSchedule createMany
   */
  export type TransactionScheduleCreateManyArgs = {
    /**
     * The data used to create many TransactionSchedules.
     * 
    **/
    data: Enumerable<TransactionScheduleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * TransactionSchedule update
   */
  export type TransactionScheduleUpdateArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * The data needed to update a TransactionSchedule.
     * 
    **/
    data: XOR<TransactionScheduleUpdateInput, TransactionScheduleUncheckedUpdateInput>
    /**
     * Choose, which TransactionSchedule to update.
     * 
    **/
    where: TransactionScheduleWhereUniqueInput
  }


  /**
   * TransactionSchedule updateMany
   */
  export type TransactionScheduleUpdateManyArgs = {
    /**
     * The data used to update TransactionSchedules.
     * 
    **/
    data: XOR<TransactionScheduleUpdateManyMutationInput, TransactionScheduleUncheckedUpdateManyInput>
    /**
     * Filter which TransactionSchedules to update
     * 
    **/
    where?: TransactionScheduleWhereInput
  }


  /**
   * TransactionSchedule upsert
   */
  export type TransactionScheduleUpsertArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * The filter to search for the TransactionSchedule to update in case it exists.
     * 
    **/
    where: TransactionScheduleWhereUniqueInput
    /**
     * In case the TransactionSchedule found by the `where` argument doesn't exist, create a new TransactionSchedule with this data.
     * 
    **/
    create: XOR<TransactionScheduleCreateInput, TransactionScheduleUncheckedCreateInput>
    /**
     * In case the TransactionSchedule was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransactionScheduleUpdateInput, TransactionScheduleUncheckedUpdateInput>
  }


  /**
   * TransactionSchedule delete
   */
  export type TransactionScheduleDeleteArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
    /**
     * Filter which TransactionSchedule to delete.
     * 
    **/
    where: TransactionScheduleWhereUniqueInput
  }


  /**
   * TransactionSchedule deleteMany
   */
  export type TransactionScheduleDeleteManyArgs = {
    /**
     * Filter which TransactionSchedules to delete
     * 
    **/
    where?: TransactionScheduleWhereInput
  }


  /**
   * TransactionSchedule without action
   */
  export type TransactionScheduleArgs = {
    /**
     * Select specific fields to fetch from the TransactionSchedule
     * 
    **/
    select?: TransactionScheduleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionScheduleInclude | null
  }



  /**
   * Model Budget
   */


  export type AggregateBudget = {
    _count: BudgetCountAggregateOutputType | null
    _avg: BudgetAvgAggregateOutputType | null
    _sum: BudgetSumAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  export type BudgetAvgAggregateOutputType = {
    integerAmount: number | null
    periodMonths: number | null
  }

  export type BudgetSumAggregateOutputType = {
    integerAmount: number | null
    periodMonths: number | null
  }

  export type BudgetMinAggregateOutputType = {
    id: string | null
    uid: string | null
    label: string | null
    integerAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    periodMonths: number | null
  }

  export type BudgetMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    label: string | null
    integerAmount: number | null
    createdAt: Date | null
    updatedAt: Date | null
    periodMonths: number | null
  }

  export type BudgetCountAggregateOutputType = {
    id: number
    uid: number
    label: number
    integerAmount: number
    createdAt: number
    updatedAt: number
    periodMonths: number
    _all: number
  }


  export type BudgetAvgAggregateInputType = {
    integerAmount?: true
    periodMonths?: true
  }

  export type BudgetSumAggregateInputType = {
    integerAmount?: true
    periodMonths?: true
  }

  export type BudgetMinAggregateInputType = {
    id?: true
    uid?: true
    label?: true
    integerAmount?: true
    createdAt?: true
    updatedAt?: true
    periodMonths?: true
  }

  export type BudgetMaxAggregateInputType = {
    id?: true
    uid?: true
    label?: true
    integerAmount?: true
    createdAt?: true
    updatedAt?: true
    periodMonths?: true
  }

  export type BudgetCountAggregateInputType = {
    id?: true
    uid?: true
    label?: true
    integerAmount?: true
    createdAt?: true
    updatedAt?: true
    periodMonths?: true
    _all?: true
  }

  export type BudgetAggregateArgs = {
    /**
     * Filter which Budget to aggregate.
     * 
    **/
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     * 
    **/
    orderBy?: Enumerable<BudgetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Budgets
    **/
    _count?: true | BudgetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BudgetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BudgetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetMaxAggregateInputType
  }

  export type GetBudgetAggregateType<T extends BudgetAggregateArgs> = {
        [P in keyof T & keyof AggregateBudget]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudget[P]>
      : GetScalarType<T[P], AggregateBudget[P]>
  }




  export type BudgetGroupByArgs = {
    where?: BudgetWhereInput
    orderBy?: Enumerable<BudgetOrderByWithAggregationInput>
    by: Array<BudgetScalarFieldEnum>
    having?: BudgetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetCountAggregateInputType | true
    _avg?: BudgetAvgAggregateInputType
    _sum?: BudgetSumAggregateInputType
    _min?: BudgetMinAggregateInputType
    _max?: BudgetMaxAggregateInputType
  }


  export type BudgetGroupByOutputType = {
    id: string
    uid: string
    label: string | null
    integerAmount: number
    createdAt: Date
    updatedAt: Date
    periodMonths: number
    _count: BudgetCountAggregateOutputType | null
    _avg: BudgetAvgAggregateOutputType | null
    _sum: BudgetSumAggregateOutputType | null
    _min: BudgetMinAggregateOutputType | null
    _max: BudgetMaxAggregateOutputType | null
  }

  type GetBudgetGroupByPayload<T extends BudgetGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BudgetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetGroupByOutputType[P]>
        }
      >
    >


  export type BudgetSelect = {
    id?: boolean
    uid?: boolean
    label?: boolean
    integerAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    periodMonths?: boolean
    BudgetCategoryInclusions?: boolean | BudgetCategoryInclusionFindManyArgs
    User?: boolean | UserArgs
    _count?: boolean | BudgetCountOutputTypeArgs
  }

  export type BudgetInclude = {
    BudgetCategoryInclusions?: boolean | BudgetCategoryInclusionFindManyArgs
    User?: boolean | UserArgs
    _count?: boolean | BudgetCountOutputTypeArgs
  }

  export type BudgetGetPayload<
    S extends boolean | null | undefined | BudgetArgs,
    U = keyof S
      > = S extends true
        ? Budget
    : S extends undefined
    ? never
    : S extends BudgetArgs | BudgetFindManyArgs
    ?'include' extends U
    ? Budget  & {
    [P in TrueKeys<S['include']>]:
        P extends 'BudgetCategoryInclusions' ? Array < BudgetCategoryInclusionGetPayload<S['include'][P]>>  :
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? BudgetCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'BudgetCategoryInclusions' ? Array < BudgetCategoryInclusionGetPayload<S['select'][P]>>  :
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? BudgetCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Budget ? Budget[P] : never
  } 
    : Budget
  : Budget


  type BudgetCountArgs = Merge<
    Omit<BudgetFindManyArgs, 'select' | 'include'> & {
      select?: BudgetCountAggregateInputType | true
    }
  >

  export interface BudgetDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Budget that matches the filter.
     * @param {BudgetFindUniqueArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BudgetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BudgetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Budget'> extends True ? CheckSelect<T, Prisma__BudgetClient<Budget>, Prisma__BudgetClient<BudgetGetPayload<T>>> : CheckSelect<T, Prisma__BudgetClient<Budget | null >, Prisma__BudgetClient<BudgetGetPayload<T> | null >>

    /**
     * Find the first Budget that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindFirstArgs} args - Arguments to find a Budget
     * @example
     * // Get one Budget
     * const budget = await prisma.budget.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BudgetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BudgetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Budget'> extends True ? CheckSelect<T, Prisma__BudgetClient<Budget>, Prisma__BudgetClient<BudgetGetPayload<T>>> : CheckSelect<T, Prisma__BudgetClient<Budget | null >, Prisma__BudgetClient<BudgetGetPayload<T> | null >>

    /**
     * Find zero or more Budgets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Budgets
     * const budgets = await prisma.budget.findMany()
     * 
     * // Get first 10 Budgets
     * const budgets = await prisma.budget.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const budgetWithIdOnly = await prisma.budget.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BudgetFindManyArgs>(
      args?: SelectSubset<T, BudgetFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Budget>>, PrismaPromise<Array<BudgetGetPayload<T>>>>

    /**
     * Create a Budget.
     * @param {BudgetCreateArgs} args - Arguments to create a Budget.
     * @example
     * // Create one Budget
     * const Budget = await prisma.budget.create({
     *   data: {
     *     // ... data to create a Budget
     *   }
     * })
     * 
    **/
    create<T extends BudgetCreateArgs>(
      args: SelectSubset<T, BudgetCreateArgs>
    ): CheckSelect<T, Prisma__BudgetClient<Budget>, Prisma__BudgetClient<BudgetGetPayload<T>>>

    /**
     * Create many Budgets.
     *     @param {BudgetCreateManyArgs} args - Arguments to create many Budgets.
     *     @example
     *     // Create many Budgets
     *     const budget = await prisma.budget.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BudgetCreateManyArgs>(
      args?: SelectSubset<T, BudgetCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Budget.
     * @param {BudgetDeleteArgs} args - Arguments to delete one Budget.
     * @example
     * // Delete one Budget
     * const Budget = await prisma.budget.delete({
     *   where: {
     *     // ... filter to delete one Budget
     *   }
     * })
     * 
    **/
    delete<T extends BudgetDeleteArgs>(
      args: SelectSubset<T, BudgetDeleteArgs>
    ): CheckSelect<T, Prisma__BudgetClient<Budget>, Prisma__BudgetClient<BudgetGetPayload<T>>>

    /**
     * Update one Budget.
     * @param {BudgetUpdateArgs} args - Arguments to update one Budget.
     * @example
     * // Update one Budget
     * const budget = await prisma.budget.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BudgetUpdateArgs>(
      args: SelectSubset<T, BudgetUpdateArgs>
    ): CheckSelect<T, Prisma__BudgetClient<Budget>, Prisma__BudgetClient<BudgetGetPayload<T>>>

    /**
     * Delete zero or more Budgets.
     * @param {BudgetDeleteManyArgs} args - Arguments to filter Budgets to delete.
     * @example
     * // Delete a few Budgets
     * const { count } = await prisma.budget.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BudgetDeleteManyArgs>(
      args?: SelectSubset<T, BudgetDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Budgets
     * const budget = await prisma.budget.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BudgetUpdateManyArgs>(
      args: SelectSubset<T, BudgetUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Budget.
     * @param {BudgetUpsertArgs} args - Arguments to update or create a Budget.
     * @example
     * // Update or create a Budget
     * const budget = await prisma.budget.upsert({
     *   create: {
     *     // ... data to create a Budget
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Budget we want to update
     *   }
     * })
    **/
    upsert<T extends BudgetUpsertArgs>(
      args: SelectSubset<T, BudgetUpsertArgs>
    ): CheckSelect<T, Prisma__BudgetClient<Budget>, Prisma__BudgetClient<BudgetGetPayload<T>>>

    /**
     * Count the number of Budgets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCountArgs} args - Arguments to filter Budgets to count.
     * @example
     * // Count the number of Budgets
     * const count = await prisma.budget.count({
     *   where: {
     *     // ... the filter for the Budgets we want to count
     *   }
     * })
    **/
    count<T extends BudgetCountArgs>(
      args?: Subset<T, BudgetCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetAggregateArgs>(args: Subset<T, BudgetAggregateArgs>): PrismaPromise<GetBudgetAggregateType<T>>

    /**
     * Group by Budget.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetGroupByArgs['orderBy'] }
        : { orderBy?: BudgetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Budget.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BudgetClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    BudgetCategoryInclusions<T extends BudgetCategoryInclusionFindManyArgs = {}>(args?: Subset<T, BudgetCategoryInclusionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BudgetCategoryInclusion>>, PrismaPromise<Array<BudgetCategoryInclusionGetPayload<T>>>>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Budget findUnique
   */
  export type BudgetFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * Throw an Error if a Budget can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Budget to fetch.
     * 
    **/
    where: BudgetWhereUniqueInput
  }


  /**
   * Budget findFirst
   */
  export type BudgetFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * Throw an Error if a Budget can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Budget to fetch.
     * 
    **/
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     * 
    **/
    orderBy?: Enumerable<BudgetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Budgets.
     * 
    **/
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Budgets.
     * 
    **/
    distinct?: Enumerable<BudgetScalarFieldEnum>
  }


  /**
   * Budget findMany
   */
  export type BudgetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * Filter, which Budgets to fetch.
     * 
    **/
    where?: BudgetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Budgets to fetch.
     * 
    **/
    orderBy?: Enumerable<BudgetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Budgets.
     * 
    **/
    cursor?: BudgetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Budgets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Budgets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BudgetScalarFieldEnum>
  }


  /**
   * Budget create
   */
  export type BudgetCreateArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * The data needed to create a Budget.
     * 
    **/
    data: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
  }


  /**
   * Budget createMany
   */
  export type BudgetCreateManyArgs = {
    /**
     * The data used to create many Budgets.
     * 
    **/
    data: Enumerable<BudgetCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Budget update
   */
  export type BudgetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * The data needed to update a Budget.
     * 
    **/
    data: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
    /**
     * Choose, which Budget to update.
     * 
    **/
    where: BudgetWhereUniqueInput
  }


  /**
   * Budget updateMany
   */
  export type BudgetUpdateManyArgs = {
    /**
     * The data used to update Budgets.
     * 
    **/
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyInput>
    /**
     * Filter which Budgets to update
     * 
    **/
    where?: BudgetWhereInput
  }


  /**
   * Budget upsert
   */
  export type BudgetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * The filter to search for the Budget to update in case it exists.
     * 
    **/
    where: BudgetWhereUniqueInput
    /**
     * In case the Budget found by the `where` argument doesn't exist, create a new Budget with this data.
     * 
    **/
    create: XOR<BudgetCreateInput, BudgetUncheckedCreateInput>
    /**
     * In case the Budget was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BudgetUpdateInput, BudgetUncheckedUpdateInput>
  }


  /**
   * Budget delete
   */
  export type BudgetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
    /**
     * Filter which Budget to delete.
     * 
    **/
    where: BudgetWhereUniqueInput
  }


  /**
   * Budget deleteMany
   */
  export type BudgetDeleteManyArgs = {
    /**
     * Filter which Budgets to delete
     * 
    **/
    where?: BudgetWhereInput
  }


  /**
   * Budget without action
   */
  export type BudgetArgs = {
    /**
     * Select specific fields to fetch from the Budget
     * 
    **/
    select?: BudgetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetInclude | null
  }



  /**
   * Model BudgetCategoryInclusion
   */


  export type AggregateBudgetCategoryInclusion = {
    _count: BudgetCategoryInclusionCountAggregateOutputType | null
    _min: BudgetCategoryInclusionMinAggregateOutputType | null
    _max: BudgetCategoryInclusionMaxAggregateOutputType | null
  }

  export type BudgetCategoryInclusionMinAggregateOutputType = {
    budgetId: string | null
    categoryId: string | null
  }

  export type BudgetCategoryInclusionMaxAggregateOutputType = {
    budgetId: string | null
    categoryId: string | null
  }

  export type BudgetCategoryInclusionCountAggregateOutputType = {
    budgetId: number
    categoryId: number
    _all: number
  }


  export type BudgetCategoryInclusionMinAggregateInputType = {
    budgetId?: true
    categoryId?: true
  }

  export type BudgetCategoryInclusionMaxAggregateInputType = {
    budgetId?: true
    categoryId?: true
  }

  export type BudgetCategoryInclusionCountAggregateInputType = {
    budgetId?: true
    categoryId?: true
    _all?: true
  }

  export type BudgetCategoryInclusionAggregateArgs = {
    /**
     * Filter which BudgetCategoryInclusion to aggregate.
     * 
    **/
    where?: BudgetCategoryInclusionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetCategoryInclusions to fetch.
     * 
    **/
    orderBy?: Enumerable<BudgetCategoryInclusionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BudgetCategoryInclusionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetCategoryInclusions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetCategoryInclusions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BudgetCategoryInclusions
    **/
    _count?: true | BudgetCategoryInclusionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BudgetCategoryInclusionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BudgetCategoryInclusionMaxAggregateInputType
  }

  export type GetBudgetCategoryInclusionAggregateType<T extends BudgetCategoryInclusionAggregateArgs> = {
        [P in keyof T & keyof AggregateBudgetCategoryInclusion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBudgetCategoryInclusion[P]>
      : GetScalarType<T[P], AggregateBudgetCategoryInclusion[P]>
  }




  export type BudgetCategoryInclusionGroupByArgs = {
    where?: BudgetCategoryInclusionWhereInput
    orderBy?: Enumerable<BudgetCategoryInclusionOrderByWithAggregationInput>
    by: Array<BudgetCategoryInclusionScalarFieldEnum>
    having?: BudgetCategoryInclusionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BudgetCategoryInclusionCountAggregateInputType | true
    _min?: BudgetCategoryInclusionMinAggregateInputType
    _max?: BudgetCategoryInclusionMaxAggregateInputType
  }


  export type BudgetCategoryInclusionGroupByOutputType = {
    budgetId: string
    categoryId: string
    _count: BudgetCategoryInclusionCountAggregateOutputType | null
    _min: BudgetCategoryInclusionMinAggregateOutputType | null
    _max: BudgetCategoryInclusionMaxAggregateOutputType | null
  }

  type GetBudgetCategoryInclusionGroupByPayload<T extends BudgetCategoryInclusionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BudgetCategoryInclusionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BudgetCategoryInclusionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BudgetCategoryInclusionGroupByOutputType[P]>
            : GetScalarType<T[P], BudgetCategoryInclusionGroupByOutputType[P]>
        }
      >
    >


  export type BudgetCategoryInclusionSelect = {
    budgetId?: boolean
    categoryId?: boolean
    Budget?: boolean | BudgetArgs
    Category?: boolean | CategoryArgs
  }

  export type BudgetCategoryInclusionInclude = {
    Budget?: boolean | BudgetArgs
    Category?: boolean | CategoryArgs
  }

  export type BudgetCategoryInclusionGetPayload<
    S extends boolean | null | undefined | BudgetCategoryInclusionArgs,
    U = keyof S
      > = S extends true
        ? BudgetCategoryInclusion
    : S extends undefined
    ? never
    : S extends BudgetCategoryInclusionArgs | BudgetCategoryInclusionFindManyArgs
    ?'include' extends U
    ? BudgetCategoryInclusion  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Budget' ? BudgetGetPayload<S['include'][P]> :
        P extends 'Category' ? CategoryGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Budget' ? BudgetGetPayload<S['select'][P]> :
        P extends 'Category' ? CategoryGetPayload<S['select'][P]> :  P extends keyof BudgetCategoryInclusion ? BudgetCategoryInclusion[P] : never
  } 
    : BudgetCategoryInclusion
  : BudgetCategoryInclusion


  type BudgetCategoryInclusionCountArgs = Merge<
    Omit<BudgetCategoryInclusionFindManyArgs, 'select' | 'include'> & {
      select?: BudgetCategoryInclusionCountAggregateInputType | true
    }
  >

  export interface BudgetCategoryInclusionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one BudgetCategoryInclusion that matches the filter.
     * @param {BudgetCategoryInclusionFindUniqueArgs} args - Arguments to find a BudgetCategoryInclusion
     * @example
     * // Get one BudgetCategoryInclusion
     * const budgetCategoryInclusion = await prisma.budgetCategoryInclusion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BudgetCategoryInclusionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BudgetCategoryInclusionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'BudgetCategoryInclusion'> extends True ? CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion>, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T>>> : CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion | null >, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T> | null >>

    /**
     * Find the first BudgetCategoryInclusion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCategoryInclusionFindFirstArgs} args - Arguments to find a BudgetCategoryInclusion
     * @example
     * // Get one BudgetCategoryInclusion
     * const budgetCategoryInclusion = await prisma.budgetCategoryInclusion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BudgetCategoryInclusionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BudgetCategoryInclusionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'BudgetCategoryInclusion'> extends True ? CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion>, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T>>> : CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion | null >, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T> | null >>

    /**
     * Find zero or more BudgetCategoryInclusions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCategoryInclusionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BudgetCategoryInclusions
     * const budgetCategoryInclusions = await prisma.budgetCategoryInclusion.findMany()
     * 
     * // Get first 10 BudgetCategoryInclusions
     * const budgetCategoryInclusions = await prisma.budgetCategoryInclusion.findMany({ take: 10 })
     * 
     * // Only select the `budgetId`
     * const budgetCategoryInclusionWithBudgetIdOnly = await prisma.budgetCategoryInclusion.findMany({ select: { budgetId: true } })
     * 
    **/
    findMany<T extends BudgetCategoryInclusionFindManyArgs>(
      args?: SelectSubset<T, BudgetCategoryInclusionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<BudgetCategoryInclusion>>, PrismaPromise<Array<BudgetCategoryInclusionGetPayload<T>>>>

    /**
     * Create a BudgetCategoryInclusion.
     * @param {BudgetCategoryInclusionCreateArgs} args - Arguments to create a BudgetCategoryInclusion.
     * @example
     * // Create one BudgetCategoryInclusion
     * const BudgetCategoryInclusion = await prisma.budgetCategoryInclusion.create({
     *   data: {
     *     // ... data to create a BudgetCategoryInclusion
     *   }
     * })
     * 
    **/
    create<T extends BudgetCategoryInclusionCreateArgs>(
      args: SelectSubset<T, BudgetCategoryInclusionCreateArgs>
    ): CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion>, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T>>>

    /**
     * Create many BudgetCategoryInclusions.
     *     @param {BudgetCategoryInclusionCreateManyArgs} args - Arguments to create many BudgetCategoryInclusions.
     *     @example
     *     // Create many BudgetCategoryInclusions
     *     const budgetCategoryInclusion = await prisma.budgetCategoryInclusion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BudgetCategoryInclusionCreateManyArgs>(
      args?: SelectSubset<T, BudgetCategoryInclusionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a BudgetCategoryInclusion.
     * @param {BudgetCategoryInclusionDeleteArgs} args - Arguments to delete one BudgetCategoryInclusion.
     * @example
     * // Delete one BudgetCategoryInclusion
     * const BudgetCategoryInclusion = await prisma.budgetCategoryInclusion.delete({
     *   where: {
     *     // ... filter to delete one BudgetCategoryInclusion
     *   }
     * })
     * 
    **/
    delete<T extends BudgetCategoryInclusionDeleteArgs>(
      args: SelectSubset<T, BudgetCategoryInclusionDeleteArgs>
    ): CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion>, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T>>>

    /**
     * Update one BudgetCategoryInclusion.
     * @param {BudgetCategoryInclusionUpdateArgs} args - Arguments to update one BudgetCategoryInclusion.
     * @example
     * // Update one BudgetCategoryInclusion
     * const budgetCategoryInclusion = await prisma.budgetCategoryInclusion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BudgetCategoryInclusionUpdateArgs>(
      args: SelectSubset<T, BudgetCategoryInclusionUpdateArgs>
    ): CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion>, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T>>>

    /**
     * Delete zero or more BudgetCategoryInclusions.
     * @param {BudgetCategoryInclusionDeleteManyArgs} args - Arguments to filter BudgetCategoryInclusions to delete.
     * @example
     * // Delete a few BudgetCategoryInclusions
     * const { count } = await prisma.budgetCategoryInclusion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BudgetCategoryInclusionDeleteManyArgs>(
      args?: SelectSubset<T, BudgetCategoryInclusionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more BudgetCategoryInclusions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCategoryInclusionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BudgetCategoryInclusions
     * const budgetCategoryInclusion = await prisma.budgetCategoryInclusion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BudgetCategoryInclusionUpdateManyArgs>(
      args: SelectSubset<T, BudgetCategoryInclusionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one BudgetCategoryInclusion.
     * @param {BudgetCategoryInclusionUpsertArgs} args - Arguments to update or create a BudgetCategoryInclusion.
     * @example
     * // Update or create a BudgetCategoryInclusion
     * const budgetCategoryInclusion = await prisma.budgetCategoryInclusion.upsert({
     *   create: {
     *     // ... data to create a BudgetCategoryInclusion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BudgetCategoryInclusion we want to update
     *   }
     * })
    **/
    upsert<T extends BudgetCategoryInclusionUpsertArgs>(
      args: SelectSubset<T, BudgetCategoryInclusionUpsertArgs>
    ): CheckSelect<T, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusion>, Prisma__BudgetCategoryInclusionClient<BudgetCategoryInclusionGetPayload<T>>>

    /**
     * Count the number of BudgetCategoryInclusions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCategoryInclusionCountArgs} args - Arguments to filter BudgetCategoryInclusions to count.
     * @example
     * // Count the number of BudgetCategoryInclusions
     * const count = await prisma.budgetCategoryInclusion.count({
     *   where: {
     *     // ... the filter for the BudgetCategoryInclusions we want to count
     *   }
     * })
    **/
    count<T extends BudgetCategoryInclusionCountArgs>(
      args?: Subset<T, BudgetCategoryInclusionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BudgetCategoryInclusionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BudgetCategoryInclusion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCategoryInclusionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BudgetCategoryInclusionAggregateArgs>(args: Subset<T, BudgetCategoryInclusionAggregateArgs>): PrismaPromise<GetBudgetCategoryInclusionAggregateType<T>>

    /**
     * Group by BudgetCategoryInclusion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BudgetCategoryInclusionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BudgetCategoryInclusionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BudgetCategoryInclusionGroupByArgs['orderBy'] }
        : { orderBy?: BudgetCategoryInclusionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BudgetCategoryInclusionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBudgetCategoryInclusionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for BudgetCategoryInclusion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BudgetCategoryInclusionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Budget<T extends BudgetArgs = {}>(args?: Subset<T, BudgetArgs>): CheckSelect<T, Prisma__BudgetClient<Budget | null >, Prisma__BudgetClient<BudgetGetPayload<T> | null >>;

    Category<T extends CategoryArgs = {}>(args?: Subset<T, CategoryArgs>): CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * BudgetCategoryInclusion findUnique
   */
  export type BudgetCategoryInclusionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * Throw an Error if a BudgetCategoryInclusion can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BudgetCategoryInclusion to fetch.
     * 
    **/
    where: BudgetCategoryInclusionWhereUniqueInput
  }


  /**
   * BudgetCategoryInclusion findFirst
   */
  export type BudgetCategoryInclusionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * Throw an Error if a BudgetCategoryInclusion can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which BudgetCategoryInclusion to fetch.
     * 
    **/
    where?: BudgetCategoryInclusionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetCategoryInclusions to fetch.
     * 
    **/
    orderBy?: Enumerable<BudgetCategoryInclusionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BudgetCategoryInclusions.
     * 
    **/
    cursor?: BudgetCategoryInclusionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetCategoryInclusions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetCategoryInclusions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BudgetCategoryInclusions.
     * 
    **/
    distinct?: Enumerable<BudgetCategoryInclusionScalarFieldEnum>
  }


  /**
   * BudgetCategoryInclusion findMany
   */
  export type BudgetCategoryInclusionFindManyArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * Filter, which BudgetCategoryInclusions to fetch.
     * 
    **/
    where?: BudgetCategoryInclusionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BudgetCategoryInclusions to fetch.
     * 
    **/
    orderBy?: Enumerable<BudgetCategoryInclusionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BudgetCategoryInclusions.
     * 
    **/
    cursor?: BudgetCategoryInclusionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BudgetCategoryInclusions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BudgetCategoryInclusions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BudgetCategoryInclusionScalarFieldEnum>
  }


  /**
   * BudgetCategoryInclusion create
   */
  export type BudgetCategoryInclusionCreateArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * The data needed to create a BudgetCategoryInclusion.
     * 
    **/
    data: XOR<BudgetCategoryInclusionCreateInput, BudgetCategoryInclusionUncheckedCreateInput>
  }


  /**
   * BudgetCategoryInclusion createMany
   */
  export type BudgetCategoryInclusionCreateManyArgs = {
    /**
     * The data used to create many BudgetCategoryInclusions.
     * 
    **/
    data: Enumerable<BudgetCategoryInclusionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * BudgetCategoryInclusion update
   */
  export type BudgetCategoryInclusionUpdateArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * The data needed to update a BudgetCategoryInclusion.
     * 
    **/
    data: XOR<BudgetCategoryInclusionUpdateInput, BudgetCategoryInclusionUncheckedUpdateInput>
    /**
     * Choose, which BudgetCategoryInclusion to update.
     * 
    **/
    where: BudgetCategoryInclusionWhereUniqueInput
  }


  /**
   * BudgetCategoryInclusion updateMany
   */
  export type BudgetCategoryInclusionUpdateManyArgs = {
    /**
     * The data used to update BudgetCategoryInclusions.
     * 
    **/
    data: XOR<BudgetCategoryInclusionUpdateManyMutationInput, BudgetCategoryInclusionUncheckedUpdateManyInput>
    /**
     * Filter which BudgetCategoryInclusions to update
     * 
    **/
    where?: BudgetCategoryInclusionWhereInput
  }


  /**
   * BudgetCategoryInclusion upsert
   */
  export type BudgetCategoryInclusionUpsertArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * The filter to search for the BudgetCategoryInclusion to update in case it exists.
     * 
    **/
    where: BudgetCategoryInclusionWhereUniqueInput
    /**
     * In case the BudgetCategoryInclusion found by the `where` argument doesn't exist, create a new BudgetCategoryInclusion with this data.
     * 
    **/
    create: XOR<BudgetCategoryInclusionCreateInput, BudgetCategoryInclusionUncheckedCreateInput>
    /**
     * In case the BudgetCategoryInclusion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BudgetCategoryInclusionUpdateInput, BudgetCategoryInclusionUncheckedUpdateInput>
  }


  /**
   * BudgetCategoryInclusion delete
   */
  export type BudgetCategoryInclusionDeleteArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
    /**
     * Filter which BudgetCategoryInclusion to delete.
     * 
    **/
    where: BudgetCategoryInclusionWhereUniqueInput
  }


  /**
   * BudgetCategoryInclusion deleteMany
   */
  export type BudgetCategoryInclusionDeleteManyArgs = {
    /**
     * Filter which BudgetCategoryInclusions to delete
     * 
    **/
    where?: BudgetCategoryInclusionWhereInput
  }


  /**
   * BudgetCategoryInclusion without action
   */
  export type BudgetCategoryInclusionArgs = {
    /**
     * Select specific fields to fetch from the BudgetCategoryInclusion
     * 
    **/
    select?: BudgetCategoryInclusionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: BudgetCategoryInclusionInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    uid: string | null
    value: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    value: string | null
    icon: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    uid: number
    value: number
    icon: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    uid?: true
    value?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    uid?: true
    value?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    uid?: true
    value?: true
    icon?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    uid: string
    value: string
    icon: string | null
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    uid?: boolean
    value?: boolean
    icon?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Transactions?: boolean | TransactionFindManyArgs
    BudgetCategoryInclusions?: boolean | BudgetCategoryInclusionFindManyArgs
    TransactionSchedule?: boolean | TransactionScheduleFindManyArgs
    User?: boolean | UserArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryInclude = {
    Transactions?: boolean | TransactionFindManyArgs
    BudgetCategoryInclusions?: boolean | BudgetCategoryInclusionFindManyArgs
    TransactionSchedule?: boolean | TransactionScheduleFindManyArgs
    User?: boolean | UserArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }

  export type CategoryGetPayload<
    S extends boolean | null | undefined | CategoryArgs,
    U = keyof S
      > = S extends true
        ? Category
    : S extends undefined
    ? never
    : S extends CategoryArgs | CategoryFindManyArgs
    ?'include' extends U
    ? Category  & {
    [P in TrueKeys<S['include']>]:
        P extends 'Transactions' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends 'BudgetCategoryInclusions' ? Array < BudgetCategoryInclusionGetPayload<S['include'][P]>>  :
        P extends 'TransactionSchedule' ? Array < TransactionScheduleGetPayload<S['include'][P]>>  :
        P extends 'User' ? UserGetPayload<S['include'][P]> :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'Transactions' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends 'BudgetCategoryInclusions' ? Array < BudgetCategoryInclusionGetPayload<S['select'][P]>>  :
        P extends 'TransactionSchedule' ? Array < TransactionScheduleGetPayload<S['select'][P]>>  :
        P extends 'User' ? UserGetPayload<S['select'][P]> :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
    : Category
  : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>> : CheckSelect<T, Prisma__CategoryClient<Category | null >, Prisma__CategoryClient<CategoryGetPayload<T> | null >>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Category>>, PrismaPromise<Array<CategoryGetPayload<T>>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): CheckSelect<T, Prisma__CategoryClient<Category>, Prisma__CategoryClient<CategoryGetPayload<T>>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    BudgetCategoryInclusions<T extends BudgetCategoryInclusionFindManyArgs = {}>(args?: Subset<T, BudgetCategoryInclusionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<BudgetCategoryInclusion>>, PrismaPromise<Array<BudgetCategoryInclusionGetPayload<T>>>>;

    TransactionSchedule<T extends TransactionScheduleFindManyArgs = {}>(args?: Subset<T, TransactionScheduleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<TransactionSchedule>>, PrismaPromise<Array<TransactionScheduleGetPayload<T>>>>;

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Throw an Error if a Category can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Feedback
   */


  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    uid: string | null
    message: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    message: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    uid: number
    message: number
    _all: number
  }


  export type FeedbackMinAggregateInputType = {
    id?: true
    uid?: true
    message?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    uid?: true
    message?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    uid?: true
    message?: true
    _all?: true
  }

  export type FeedbackAggregateArgs = {
    /**
     * Filter which Feedback to aggregate.
     * 
    **/
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     * 
    **/
    orderBy?: Enumerable<FeedbackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs = {
    where?: FeedbackWhereInput
    orderBy?: Enumerable<FeedbackOrderByWithAggregationInput>
    by: Array<FeedbackScalarFieldEnum>
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }


  export type FeedbackGroupByOutputType = {
    id: string
    uid: string
    message: string | null
    _count: FeedbackCountAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect = {
    id?: boolean
    uid?: boolean
    message?: boolean
    User?: boolean | UserArgs
  }

  export type FeedbackInclude = {
    User?: boolean | UserArgs
  }

  export type FeedbackGetPayload<
    S extends boolean | null | undefined | FeedbackArgs,
    U = keyof S
      > = S extends true
        ? Feedback
    : S extends undefined
    ? never
    : S extends FeedbackArgs | FeedbackFindManyArgs
    ?'include' extends U
    ? Feedback  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof Feedback ? Feedback[P] : never
  } 
    : Feedback
  : Feedback


  type FeedbackCountArgs = Merge<
    Omit<FeedbackFindManyArgs, 'select' | 'include'> & {
      select?: FeedbackCountAggregateInputType | true
    }
  >

  export interface FeedbackDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedbackFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FeedbackFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Feedback'> extends True ? CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>> : CheckSelect<T, Prisma__FeedbackClient<Feedback | null >, Prisma__FeedbackClient<FeedbackGetPayload<T> | null >>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedbackFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FeedbackFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Feedback'> extends True ? CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>> : CheckSelect<T, Prisma__FeedbackClient<Feedback | null >, Prisma__FeedbackClient<FeedbackGetPayload<T> | null >>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FeedbackFindManyArgs>(
      args?: SelectSubset<T, FeedbackFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Feedback>>, PrismaPromise<Array<FeedbackGetPayload<T>>>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
    **/
    create<T extends FeedbackCreateArgs>(
      args: SelectSubset<T, FeedbackCreateArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Create many Feedbacks.
     *     @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     *     @example
     *     // Create many Feedbacks
     *     const feedback = await prisma.feedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedbackCreateManyArgs>(
      args?: SelectSubset<T, FeedbackCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
    **/
    delete<T extends FeedbackDeleteArgs>(
      args: SelectSubset<T, FeedbackDeleteArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedbackUpdateArgs>(
      args: SelectSubset<T, FeedbackUpdateArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedbackDeleteManyArgs>(
      args?: SelectSubset<T, FeedbackDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedbackUpdateManyArgs>(
      args: SelectSubset<T, FeedbackUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
    **/
    upsert<T extends FeedbackUpsertArgs>(
      args: SelectSubset<T, FeedbackUpsertArgs>
    ): CheckSelect<T, Prisma__FeedbackClient<Feedback>, Prisma__FeedbackClient<FeedbackGetPayload<T>>>

    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FeedbackClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Throw an Error if a Feedback can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Feedback to fetch.
     * 
    **/
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Throw an Error if a Feedback can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Feedback to fetch.
     * 
    **/
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     * 
    **/
    orderBy?: Enumerable<FeedbackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     * 
    **/
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     * 
    **/
    distinct?: Enumerable<FeedbackScalarFieldEnum>
  }


  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Filter, which Feedbacks to fetch.
     * 
    **/
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     * 
    **/
    orderBy?: Enumerable<FeedbackOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     * 
    **/
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FeedbackScalarFieldEnum>
  }


  /**
   * Feedback create
   */
  export type FeedbackCreateArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * The data needed to create a Feedback.
     * 
    **/
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }


  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs = {
    /**
     * The data used to create many Feedbacks.
     * 
    **/
    data: Enumerable<FeedbackCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * The data needed to update a Feedback.
     * 
    **/
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     * 
    **/
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs = {
    /**
     * The data used to update Feedbacks.
     * 
    **/
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     * 
    **/
    where?: FeedbackWhereInput
  }


  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     * 
    **/
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     * 
    **/
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }


  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
    /**
     * Filter which Feedback to delete.
     * 
    **/
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs = {
    /**
     * Filter which Feedbacks to delete
     * 
    **/
    where?: FeedbackWhereInput
  }


  /**
   * Feedback without action
   */
  export type FeedbackArgs = {
    /**
     * Select specific fields to fetch from the Feedback
     * 
    **/
    select?: FeedbackSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: FeedbackInclude | null
  }



  /**
   * Model Log
   */


  export type AggregateLog = {
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  export type LogAvgAggregateOutputType = {
    timestamp: number | null
  }

  export type LogSumAggregateOutputType = {
    timestamp: number | null
  }

  export type LogMinAggregateOutputType = {
    id: string | null
    uid: string | null
    type: string | null
    message: string | null
    data: string | null
    stackTrace: string | null
    device: string | null
    timestamp: number | null
    timestring: string | null
    createdAt: Date | null
    href: string | null
  }

  export type LogMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    type: string | null
    message: string | null
    data: string | null
    stackTrace: string | null
    device: string | null
    timestamp: number | null
    timestring: string | null
    createdAt: Date | null
    href: string | null
  }

  export type LogCountAggregateOutputType = {
    id: number
    uid: number
    type: number
    message: number
    data: number
    stackTrace: number
    device: number
    timestamp: number
    timestring: number
    createdAt: number
    href: number
    _all: number
  }


  export type LogAvgAggregateInputType = {
    timestamp?: true
  }

  export type LogSumAggregateInputType = {
    timestamp?: true
  }

  export type LogMinAggregateInputType = {
    id?: true
    uid?: true
    type?: true
    message?: true
    data?: true
    stackTrace?: true
    device?: true
    timestamp?: true
    timestring?: true
    createdAt?: true
    href?: true
  }

  export type LogMaxAggregateInputType = {
    id?: true
    uid?: true
    type?: true
    message?: true
    data?: true
    stackTrace?: true
    device?: true
    timestamp?: true
    timestring?: true
    createdAt?: true
    href?: true
  }

  export type LogCountAggregateInputType = {
    id?: true
    uid?: true
    type?: true
    message?: true
    data?: true
    stackTrace?: true
    device?: true
    timestamp?: true
    timestring?: true
    createdAt?: true
    href?: true
    _all?: true
  }

  export type LogAggregateArgs = {
    /**
     * Filter which Log to aggregate.
     * 
    **/
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     * 
    **/
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Logs
    **/
    _count?: true | LogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LogMaxAggregateInputType
  }

  export type GetLogAggregateType<T extends LogAggregateArgs> = {
        [P in keyof T & keyof AggregateLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLog[P]>
      : GetScalarType<T[P], AggregateLog[P]>
  }




  export type LogGroupByArgs = {
    where?: LogWhereInput
    orderBy?: Enumerable<LogOrderByWithAggregationInput>
    by: Array<LogScalarFieldEnum>
    having?: LogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LogCountAggregateInputType | true
    _avg?: LogAvgAggregateInputType
    _sum?: LogSumAggregateInputType
    _min?: LogMinAggregateInputType
    _max?: LogMaxAggregateInputType
  }


  export type LogGroupByOutputType = {
    id: string
    uid: string | null
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt: Date
    href: string
    _count: LogCountAggregateOutputType | null
    _avg: LogAvgAggregateOutputType | null
    _sum: LogSumAggregateOutputType | null
    _min: LogMinAggregateOutputType | null
    _max: LogMaxAggregateOutputType | null
  }

  type GetLogGroupByPayload<T extends LogGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LogGroupByOutputType[P]>
            : GetScalarType<T[P], LogGroupByOutputType[P]>
        }
      >
    >


  export type LogSelect = {
    id?: boolean
    uid?: boolean
    type?: boolean
    message?: boolean
    data?: boolean
    stackTrace?: boolean
    device?: boolean
    timestamp?: boolean
    timestring?: boolean
    createdAt?: boolean
    href?: boolean
    User?: boolean | UserArgs
  }

  export type LogInclude = {
    User?: boolean | UserArgs
  }

  export type LogGetPayload<
    S extends boolean | null | undefined | LogArgs,
    U = keyof S
      > = S extends true
        ? Log
    : S extends undefined
    ? never
    : S extends LogArgs | LogFindManyArgs
    ?'include' extends U
    ? Log  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> | null :  P extends keyof Log ? Log[P] : never
  } 
    : Log
  : Log


  type LogCountArgs = Merge<
    Omit<LogFindManyArgs, 'select' | 'include'> & {
      select?: LogCountAggregateInputType | true
    }
  >

  export interface LogDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Log that matches the filter.
     * @param {LogFindUniqueArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LogFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LogFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Log'> extends True ? CheckSelect<T, Prisma__LogClient<Log>, Prisma__LogClient<LogGetPayload<T>>> : CheckSelect<T, Prisma__LogClient<Log | null >, Prisma__LogClient<LogGetPayload<T> | null >>

    /**
     * Find the first Log that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindFirstArgs} args - Arguments to find a Log
     * @example
     * // Get one Log
     * const log = await prisma.log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LogFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LogFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Log'> extends True ? CheckSelect<T, Prisma__LogClient<Log>, Prisma__LogClient<LogGetPayload<T>>> : CheckSelect<T, Prisma__LogClient<Log | null >, Prisma__LogClient<LogGetPayload<T> | null >>

    /**
     * Find zero or more Logs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Logs
     * const logs = await prisma.log.findMany()
     * 
     * // Get first 10 Logs
     * const logs = await prisma.log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const logWithIdOnly = await prisma.log.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LogFindManyArgs>(
      args?: SelectSubset<T, LogFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Log>>, PrismaPromise<Array<LogGetPayload<T>>>>

    /**
     * Create a Log.
     * @param {LogCreateArgs} args - Arguments to create a Log.
     * @example
     * // Create one Log
     * const Log = await prisma.log.create({
     *   data: {
     *     // ... data to create a Log
     *   }
     * })
     * 
    **/
    create<T extends LogCreateArgs>(
      args: SelectSubset<T, LogCreateArgs>
    ): CheckSelect<T, Prisma__LogClient<Log>, Prisma__LogClient<LogGetPayload<T>>>

    /**
     * Create many Logs.
     *     @param {LogCreateManyArgs} args - Arguments to create many Logs.
     *     @example
     *     // Create many Logs
     *     const log = await prisma.log.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LogCreateManyArgs>(
      args?: SelectSubset<T, LogCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Log.
     * @param {LogDeleteArgs} args - Arguments to delete one Log.
     * @example
     * // Delete one Log
     * const Log = await prisma.log.delete({
     *   where: {
     *     // ... filter to delete one Log
     *   }
     * })
     * 
    **/
    delete<T extends LogDeleteArgs>(
      args: SelectSubset<T, LogDeleteArgs>
    ): CheckSelect<T, Prisma__LogClient<Log>, Prisma__LogClient<LogGetPayload<T>>>

    /**
     * Update one Log.
     * @param {LogUpdateArgs} args - Arguments to update one Log.
     * @example
     * // Update one Log
     * const log = await prisma.log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LogUpdateArgs>(
      args: SelectSubset<T, LogUpdateArgs>
    ): CheckSelect<T, Prisma__LogClient<Log>, Prisma__LogClient<LogGetPayload<T>>>

    /**
     * Delete zero or more Logs.
     * @param {LogDeleteManyArgs} args - Arguments to filter Logs to delete.
     * @example
     * // Delete a few Logs
     * const { count } = await prisma.log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LogDeleteManyArgs>(
      args?: SelectSubset<T, LogDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Logs
     * const log = await prisma.log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LogUpdateManyArgs>(
      args: SelectSubset<T, LogUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Log.
     * @param {LogUpsertArgs} args - Arguments to update or create a Log.
     * @example
     * // Update or create a Log
     * const log = await prisma.log.upsert({
     *   create: {
     *     // ... data to create a Log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Log we want to update
     *   }
     * })
    **/
    upsert<T extends LogUpsertArgs>(
      args: SelectSubset<T, LogUpsertArgs>
    ): CheckSelect<T, Prisma__LogClient<Log>, Prisma__LogClient<LogGetPayload<T>>>

    /**
     * Count the number of Logs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogCountArgs} args - Arguments to filter Logs to count.
     * @example
     * // Count the number of Logs
     * const count = await prisma.log.count({
     *   where: {
     *     // ... the filter for the Logs we want to count
     *   }
     * })
    **/
    count<T extends LogCountArgs>(
      args?: Subset<T, LogCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LogAggregateArgs>(args: Subset<T, LogAggregateArgs>): PrismaPromise<GetLogAggregateType<T>>

    /**
     * Group by Log.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LogGroupByArgs['orderBy'] }
        : { orderBy?: LogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLogGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LogClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Log findUnique
   */
  export type LogFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * Throw an Error if a Log can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Log to fetch.
     * 
    **/
    where: LogWhereUniqueInput
  }


  /**
   * Log findFirst
   */
  export type LogFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * Throw an Error if a Log can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Log to fetch.
     * 
    **/
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     * 
    **/
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Logs.
     * 
    **/
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Logs.
     * 
    **/
    distinct?: Enumerable<LogScalarFieldEnum>
  }


  /**
   * Log findMany
   */
  export type LogFindManyArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * Filter, which Logs to fetch.
     * 
    **/
    where?: LogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Logs to fetch.
     * 
    **/
    orderBy?: Enumerable<LogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Logs.
     * 
    **/
    cursor?: LogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Logs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Logs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LogScalarFieldEnum>
  }


  /**
   * Log create
   */
  export type LogCreateArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * The data needed to create a Log.
     * 
    **/
    data: XOR<LogCreateInput, LogUncheckedCreateInput>
  }


  /**
   * Log createMany
   */
  export type LogCreateManyArgs = {
    /**
     * The data used to create many Logs.
     * 
    **/
    data: Enumerable<LogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Log update
   */
  export type LogUpdateArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * The data needed to update a Log.
     * 
    **/
    data: XOR<LogUpdateInput, LogUncheckedUpdateInput>
    /**
     * Choose, which Log to update.
     * 
    **/
    where: LogWhereUniqueInput
  }


  /**
   * Log updateMany
   */
  export type LogUpdateManyArgs = {
    /**
     * The data used to update Logs.
     * 
    **/
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyInput>
    /**
     * Filter which Logs to update
     * 
    **/
    where?: LogWhereInput
  }


  /**
   * Log upsert
   */
  export type LogUpsertArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * The filter to search for the Log to update in case it exists.
     * 
    **/
    where: LogWhereUniqueInput
    /**
     * In case the Log found by the `where` argument doesn't exist, create a new Log with this data.
     * 
    **/
    create: XOR<LogCreateInput, LogUncheckedCreateInput>
    /**
     * In case the Log was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LogUpdateInput, LogUncheckedUpdateInput>
  }


  /**
   * Log delete
   */
  export type LogDeleteArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
    /**
     * Filter which Log to delete.
     * 
    **/
    where: LogWhereUniqueInput
  }


  /**
   * Log deleteMany
   */
  export type LogDeleteManyArgs = {
    /**
     * Filter which Logs to delete
     * 
    **/
    where?: LogWhereInput
  }


  /**
   * Log without action
   */
  export type LogArgs = {
    /**
     * Select specific fields to fetch from the Log
     * 
    **/
    select?: LogSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LogInclude | null
  }



  /**
   * Model Config
   */


  export type AggregateConfig = {
    _count: ConfigCountAggregateOutputType | null
    _min: ConfigMinAggregateOutputType | null
    _max: ConfigMaxAggregateOutputType | null
  }

  export type ConfigMinAggregateOutputType = {
    key: string | null
    value: string | null
  }

  export type ConfigMaxAggregateOutputType = {
    key: string | null
    value: string | null
  }

  export type ConfigCountAggregateOutputType = {
    key: number
    value: number
    _all: number
  }


  export type ConfigMinAggregateInputType = {
    key?: true
    value?: true
  }

  export type ConfigMaxAggregateInputType = {
    key?: true
    value?: true
  }

  export type ConfigCountAggregateInputType = {
    key?: true
    value?: true
    _all?: true
  }

  export type ConfigAggregateArgs = {
    /**
     * Filter which Config to aggregate.
     * 
    **/
    where?: ConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configs to fetch.
     * 
    **/
    orderBy?: Enumerable<ConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Configs
    **/
    _count?: true | ConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ConfigMaxAggregateInputType
  }

  export type GetConfigAggregateType<T extends ConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConfig[P]>
      : GetScalarType<T[P], AggregateConfig[P]>
  }




  export type ConfigGroupByArgs = {
    where?: ConfigWhereInput
    orderBy?: Enumerable<ConfigOrderByWithAggregationInput>
    by: Array<ConfigScalarFieldEnum>
    having?: ConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ConfigCountAggregateInputType | true
    _min?: ConfigMinAggregateInputType
    _max?: ConfigMaxAggregateInputType
  }


  export type ConfigGroupByOutputType = {
    key: string
    value: string
    _count: ConfigCountAggregateOutputType | null
    _min: ConfigMinAggregateOutputType | null
    _max: ConfigMaxAggregateOutputType | null
  }

  type GetConfigGroupByPayload<T extends ConfigGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ConfigGroupByOutputType[P]>
            : GetScalarType<T[P], ConfigGroupByOutputType[P]>
        }
      >
    >


  export type ConfigSelect = {
    key?: boolean
    value?: boolean
  }

  export type ConfigGetPayload<
    S extends boolean | null | undefined | ConfigArgs,
    U = keyof S
      > = S extends true
        ? Config
    : S extends undefined
    ? never
    : S extends ConfigArgs | ConfigFindManyArgs
    ?'include' extends U
    ? Config 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Config ? Config[P] : never
  } 
    : Config
  : Config


  type ConfigCountArgs = Merge<
    Omit<ConfigFindManyArgs, 'select' | 'include'> & {
      select?: ConfigCountAggregateInputType | true
    }
  >

  export interface ConfigDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Config that matches the filter.
     * @param {ConfigFindUniqueArgs} args - Arguments to find a Config
     * @example
     * // Get one Config
     * const config = await prisma.config.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConfigFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ConfigFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Config'> extends True ? CheckSelect<T, Prisma__ConfigClient<Config>, Prisma__ConfigClient<ConfigGetPayload<T>>> : CheckSelect<T, Prisma__ConfigClient<Config | null >, Prisma__ConfigClient<ConfigGetPayload<T> | null >>

    /**
     * Find the first Config that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigFindFirstArgs} args - Arguments to find a Config
     * @example
     * // Get one Config
     * const config = await prisma.config.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConfigFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ConfigFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Config'> extends True ? CheckSelect<T, Prisma__ConfigClient<Config>, Prisma__ConfigClient<ConfigGetPayload<T>>> : CheckSelect<T, Prisma__ConfigClient<Config | null >, Prisma__ConfigClient<ConfigGetPayload<T> | null >>

    /**
     * Find zero or more Configs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Configs
     * const configs = await prisma.config.findMany()
     * 
     * // Get first 10 Configs
     * const configs = await prisma.config.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const configWithKeyOnly = await prisma.config.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends ConfigFindManyArgs>(
      args?: SelectSubset<T, ConfigFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Config>>, PrismaPromise<Array<ConfigGetPayload<T>>>>

    /**
     * Create a Config.
     * @param {ConfigCreateArgs} args - Arguments to create a Config.
     * @example
     * // Create one Config
     * const Config = await prisma.config.create({
     *   data: {
     *     // ... data to create a Config
     *   }
     * })
     * 
    **/
    create<T extends ConfigCreateArgs>(
      args: SelectSubset<T, ConfigCreateArgs>
    ): CheckSelect<T, Prisma__ConfigClient<Config>, Prisma__ConfigClient<ConfigGetPayload<T>>>

    /**
     * Create many Configs.
     *     @param {ConfigCreateManyArgs} args - Arguments to create many Configs.
     *     @example
     *     // Create many Configs
     *     const config = await prisma.config.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ConfigCreateManyArgs>(
      args?: SelectSubset<T, ConfigCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Config.
     * @param {ConfigDeleteArgs} args - Arguments to delete one Config.
     * @example
     * // Delete one Config
     * const Config = await prisma.config.delete({
     *   where: {
     *     // ... filter to delete one Config
     *   }
     * })
     * 
    **/
    delete<T extends ConfigDeleteArgs>(
      args: SelectSubset<T, ConfigDeleteArgs>
    ): CheckSelect<T, Prisma__ConfigClient<Config>, Prisma__ConfigClient<ConfigGetPayload<T>>>

    /**
     * Update one Config.
     * @param {ConfigUpdateArgs} args - Arguments to update one Config.
     * @example
     * // Update one Config
     * const config = await prisma.config.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConfigUpdateArgs>(
      args: SelectSubset<T, ConfigUpdateArgs>
    ): CheckSelect<T, Prisma__ConfigClient<Config>, Prisma__ConfigClient<ConfigGetPayload<T>>>

    /**
     * Delete zero or more Configs.
     * @param {ConfigDeleteManyArgs} args - Arguments to filter Configs to delete.
     * @example
     * // Delete a few Configs
     * const { count } = await prisma.config.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConfigDeleteManyArgs>(
      args?: SelectSubset<T, ConfigDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Configs
     * const config = await prisma.config.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConfigUpdateManyArgs>(
      args: SelectSubset<T, ConfigUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Config.
     * @param {ConfigUpsertArgs} args - Arguments to update or create a Config.
     * @example
     * // Update or create a Config
     * const config = await prisma.config.upsert({
     *   create: {
     *     // ... data to create a Config
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Config we want to update
     *   }
     * })
    **/
    upsert<T extends ConfigUpsertArgs>(
      args: SelectSubset<T, ConfigUpsertArgs>
    ): CheckSelect<T, Prisma__ConfigClient<Config>, Prisma__ConfigClient<ConfigGetPayload<T>>>

    /**
     * Count the number of Configs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigCountArgs} args - Arguments to filter Configs to count.
     * @example
     * // Count the number of Configs
     * const count = await prisma.config.count({
     *   where: {
     *     // ... the filter for the Configs we want to count
     *   }
     * })
    **/
    count<T extends ConfigCountArgs>(
      args?: Subset<T, ConfigCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Config.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConfigAggregateArgs>(args: Subset<T, ConfigAggregateArgs>): PrismaPromise<GetConfigAggregateType<T>>

    /**
     * Group by Config.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ConfigGroupByArgs['orderBy'] }
        : { orderBy?: ConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetConfigGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Config.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConfigClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Config findUnique
   */
  export type ConfigFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * Throw an Error if a Config can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Config to fetch.
     * 
    **/
    where: ConfigWhereUniqueInput
  }


  /**
   * Config findFirst
   */
  export type ConfigFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * Throw an Error if a Config can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Config to fetch.
     * 
    **/
    where?: ConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configs to fetch.
     * 
    **/
    orderBy?: Enumerable<ConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Configs.
     * 
    **/
    cursor?: ConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Configs.
     * 
    **/
    distinct?: Enumerable<ConfigScalarFieldEnum>
  }


  /**
   * Config findMany
   */
  export type ConfigFindManyArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * Filter, which Configs to fetch.
     * 
    **/
    where?: ConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Configs to fetch.
     * 
    **/
    orderBy?: Enumerable<ConfigOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Configs.
     * 
    **/
    cursor?: ConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Configs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Configs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ConfigScalarFieldEnum>
  }


  /**
   * Config create
   */
  export type ConfigCreateArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * The data needed to create a Config.
     * 
    **/
    data: XOR<ConfigCreateInput, ConfigUncheckedCreateInput>
  }


  /**
   * Config createMany
   */
  export type ConfigCreateManyArgs = {
    /**
     * The data used to create many Configs.
     * 
    **/
    data: Enumerable<ConfigCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Config update
   */
  export type ConfigUpdateArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * The data needed to update a Config.
     * 
    **/
    data: XOR<ConfigUpdateInput, ConfigUncheckedUpdateInput>
    /**
     * Choose, which Config to update.
     * 
    **/
    where: ConfigWhereUniqueInput
  }


  /**
   * Config updateMany
   */
  export type ConfigUpdateManyArgs = {
    /**
     * The data used to update Configs.
     * 
    **/
    data: XOR<ConfigUpdateManyMutationInput, ConfigUncheckedUpdateManyInput>
    /**
     * Filter which Configs to update
     * 
    **/
    where?: ConfigWhereInput
  }


  /**
   * Config upsert
   */
  export type ConfigUpsertArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * The filter to search for the Config to update in case it exists.
     * 
    **/
    where: ConfigWhereUniqueInput
    /**
     * In case the Config found by the `where` argument doesn't exist, create a new Config with this data.
     * 
    **/
    create: XOR<ConfigCreateInput, ConfigUncheckedCreateInput>
    /**
     * In case the Config was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ConfigUpdateInput, ConfigUncheckedUpdateInput>
  }


  /**
   * Config delete
   */
  export type ConfigDeleteArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
    /**
     * Filter which Config to delete.
     * 
    **/
    where: ConfigWhereUniqueInput
  }


  /**
   * Config deleteMany
   */
  export type ConfigDeleteManyArgs = {
    /**
     * Filter which Configs to delete
     * 
    **/
    where?: ConfigWhereInput
  }


  /**
   * Config without action
   */
  export type ConfigArgs = {
    /**
     * Select specific fields to fetch from the Config
     * 
    **/
    select?: ConfigSelect | null
  }



  /**
   * Model PremiumSubscription
   */


  export type AggregatePremiumSubscription = {
    _count: PremiumSubscriptionCountAggregateOutputType | null
    _min: PremiumSubscriptionMinAggregateOutputType | null
    _max: PremiumSubscriptionMaxAggregateOutputType | null
  }

  export type PremiumSubscriptionMinAggregateOutputType = {
    id: string | null
    uid: string | null
    currentPeriodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PremiumSubscriptionMaxAggregateOutputType = {
    id: string | null
    uid: string | null
    currentPeriodEnd: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PremiumSubscriptionCountAggregateOutputType = {
    id: number
    uid: number
    currentPeriodEnd: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PremiumSubscriptionMinAggregateInputType = {
    id?: true
    uid?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PremiumSubscriptionMaxAggregateInputType = {
    id?: true
    uid?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PremiumSubscriptionCountAggregateInputType = {
    id?: true
    uid?: true
    currentPeriodEnd?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PremiumSubscriptionAggregateArgs = {
    /**
     * Filter which PremiumSubscription to aggregate.
     * 
    **/
    where?: PremiumSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumSubscriptions to fetch.
     * 
    **/
    orderBy?: Enumerable<PremiumSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PremiumSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumSubscriptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumSubscriptions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PremiumSubscriptions
    **/
    _count?: true | PremiumSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiumSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiumSubscriptionMaxAggregateInputType
  }

  export type GetPremiumSubscriptionAggregateType<T extends PremiumSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregatePremiumSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremiumSubscription[P]>
      : GetScalarType<T[P], AggregatePremiumSubscription[P]>
  }




  export type PremiumSubscriptionGroupByArgs = {
    where?: PremiumSubscriptionWhereInput
    orderBy?: Enumerable<PremiumSubscriptionOrderByWithAggregationInput>
    by: Array<PremiumSubscriptionScalarFieldEnum>
    having?: PremiumSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiumSubscriptionCountAggregateInputType | true
    _min?: PremiumSubscriptionMinAggregateInputType
    _max?: PremiumSubscriptionMaxAggregateInputType
  }


  export type PremiumSubscriptionGroupByOutputType = {
    id: string
    uid: string
    currentPeriodEnd: Date | null
    createdAt: Date
    updatedAt: Date
    _count: PremiumSubscriptionCountAggregateOutputType | null
    _min: PremiumSubscriptionMinAggregateOutputType | null
    _max: PremiumSubscriptionMaxAggregateOutputType | null
  }

  type GetPremiumSubscriptionGroupByPayload<T extends PremiumSubscriptionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PremiumSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiumSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiumSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], PremiumSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type PremiumSubscriptionSelect = {
    id?: boolean
    uid?: boolean
    currentPeriodEnd?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    User?: boolean | UserArgs
  }

  export type PremiumSubscriptionInclude = {
    User?: boolean | UserArgs
  }

  export type PremiumSubscriptionGetPayload<
    S extends boolean | null | undefined | PremiumSubscriptionArgs,
    U = keyof S
      > = S extends true
        ? PremiumSubscription
    : S extends undefined
    ? never
    : S extends PremiumSubscriptionArgs | PremiumSubscriptionFindManyArgs
    ?'include' extends U
    ? PremiumSubscription  & {
    [P in TrueKeys<S['include']>]:
        P extends 'User' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'User' ? UserGetPayload<S['select'][P]> :  P extends keyof PremiumSubscription ? PremiumSubscription[P] : never
  } 
    : PremiumSubscription
  : PremiumSubscription


  type PremiumSubscriptionCountArgs = Merge<
    Omit<PremiumSubscriptionFindManyArgs, 'select' | 'include'> & {
      select?: PremiumSubscriptionCountAggregateInputType | true
    }
  >

  export interface PremiumSubscriptionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PremiumSubscription that matches the filter.
     * @param {PremiumSubscriptionFindUniqueArgs} args - Arguments to find a PremiumSubscription
     * @example
     * // Get one PremiumSubscription
     * const premiumSubscription = await prisma.premiumSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PremiumSubscriptionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PremiumSubscriptionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PremiumSubscription'> extends True ? CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription>, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T>>> : CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription | null >, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T> | null >>

    /**
     * Find the first PremiumSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumSubscriptionFindFirstArgs} args - Arguments to find a PremiumSubscription
     * @example
     * // Get one PremiumSubscription
     * const premiumSubscription = await prisma.premiumSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PremiumSubscriptionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PremiumSubscriptionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PremiumSubscription'> extends True ? CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription>, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T>>> : CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription | null >, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T> | null >>

    /**
     * Find zero or more PremiumSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumSubscriptionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PremiumSubscriptions
     * const premiumSubscriptions = await prisma.premiumSubscription.findMany()
     * 
     * // Get first 10 PremiumSubscriptions
     * const premiumSubscriptions = await prisma.premiumSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const premiumSubscriptionWithIdOnly = await prisma.premiumSubscription.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PremiumSubscriptionFindManyArgs>(
      args?: SelectSubset<T, PremiumSubscriptionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PremiumSubscription>>, PrismaPromise<Array<PremiumSubscriptionGetPayload<T>>>>

    /**
     * Create a PremiumSubscription.
     * @param {PremiumSubscriptionCreateArgs} args - Arguments to create a PremiumSubscription.
     * @example
     * // Create one PremiumSubscription
     * const PremiumSubscription = await prisma.premiumSubscription.create({
     *   data: {
     *     // ... data to create a PremiumSubscription
     *   }
     * })
     * 
    **/
    create<T extends PremiumSubscriptionCreateArgs>(
      args: SelectSubset<T, PremiumSubscriptionCreateArgs>
    ): CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription>, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T>>>

    /**
     * Create many PremiumSubscriptions.
     *     @param {PremiumSubscriptionCreateManyArgs} args - Arguments to create many PremiumSubscriptions.
     *     @example
     *     // Create many PremiumSubscriptions
     *     const premiumSubscription = await prisma.premiumSubscription.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PremiumSubscriptionCreateManyArgs>(
      args?: SelectSubset<T, PremiumSubscriptionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PremiumSubscription.
     * @param {PremiumSubscriptionDeleteArgs} args - Arguments to delete one PremiumSubscription.
     * @example
     * // Delete one PremiumSubscription
     * const PremiumSubscription = await prisma.premiumSubscription.delete({
     *   where: {
     *     // ... filter to delete one PremiumSubscription
     *   }
     * })
     * 
    **/
    delete<T extends PremiumSubscriptionDeleteArgs>(
      args: SelectSubset<T, PremiumSubscriptionDeleteArgs>
    ): CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription>, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T>>>

    /**
     * Update one PremiumSubscription.
     * @param {PremiumSubscriptionUpdateArgs} args - Arguments to update one PremiumSubscription.
     * @example
     * // Update one PremiumSubscription
     * const premiumSubscription = await prisma.premiumSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PremiumSubscriptionUpdateArgs>(
      args: SelectSubset<T, PremiumSubscriptionUpdateArgs>
    ): CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription>, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T>>>

    /**
     * Delete zero or more PremiumSubscriptions.
     * @param {PremiumSubscriptionDeleteManyArgs} args - Arguments to filter PremiumSubscriptions to delete.
     * @example
     * // Delete a few PremiumSubscriptions
     * const { count } = await prisma.premiumSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PremiumSubscriptionDeleteManyArgs>(
      args?: SelectSubset<T, PremiumSubscriptionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PremiumSubscriptions
     * const premiumSubscription = await prisma.premiumSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PremiumSubscriptionUpdateManyArgs>(
      args: SelectSubset<T, PremiumSubscriptionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PremiumSubscription.
     * @param {PremiumSubscriptionUpsertArgs} args - Arguments to update or create a PremiumSubscription.
     * @example
     * // Update or create a PremiumSubscription
     * const premiumSubscription = await prisma.premiumSubscription.upsert({
     *   create: {
     *     // ... data to create a PremiumSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PremiumSubscription we want to update
     *   }
     * })
    **/
    upsert<T extends PremiumSubscriptionUpsertArgs>(
      args: SelectSubset<T, PremiumSubscriptionUpsertArgs>
    ): CheckSelect<T, Prisma__PremiumSubscriptionClient<PremiumSubscription>, Prisma__PremiumSubscriptionClient<PremiumSubscriptionGetPayload<T>>>

    /**
     * Count the number of PremiumSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumSubscriptionCountArgs} args - Arguments to filter PremiumSubscriptions to count.
     * @example
     * // Count the number of PremiumSubscriptions
     * const count = await prisma.premiumSubscription.count({
     *   where: {
     *     // ... the filter for the PremiumSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends PremiumSubscriptionCountArgs>(
      args?: Subset<T, PremiumSubscriptionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiumSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PremiumSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiumSubscriptionAggregateArgs>(args: Subset<T, PremiumSubscriptionAggregateArgs>): PrismaPromise<GetPremiumSubscriptionAggregateType<T>>

    /**
     * Group by PremiumSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiumSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiumSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: PremiumSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiumSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiumSubscriptionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PremiumSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PremiumSubscriptionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    User<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PremiumSubscription findUnique
   */
  export type PremiumSubscriptionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * Throw an Error if a PremiumSubscription can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PremiumSubscription to fetch.
     * 
    **/
    where: PremiumSubscriptionWhereUniqueInput
  }


  /**
   * PremiumSubscription findFirst
   */
  export type PremiumSubscriptionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * Throw an Error if a PremiumSubscription can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PremiumSubscription to fetch.
     * 
    **/
    where?: PremiumSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumSubscriptions to fetch.
     * 
    **/
    orderBy?: Enumerable<PremiumSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumSubscriptions.
     * 
    **/
    cursor?: PremiumSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumSubscriptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumSubscriptions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumSubscriptions.
     * 
    **/
    distinct?: Enumerable<PremiumSubscriptionScalarFieldEnum>
  }


  /**
   * PremiumSubscription findMany
   */
  export type PremiumSubscriptionFindManyArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * Filter, which PremiumSubscriptions to fetch.
     * 
    **/
    where?: PremiumSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumSubscriptions to fetch.
     * 
    **/
    orderBy?: Enumerable<PremiumSubscriptionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PremiumSubscriptions.
     * 
    **/
    cursor?: PremiumSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumSubscriptions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumSubscriptions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PremiumSubscriptionScalarFieldEnum>
  }


  /**
   * PremiumSubscription create
   */
  export type PremiumSubscriptionCreateArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * The data needed to create a PremiumSubscription.
     * 
    **/
    data: XOR<PremiumSubscriptionCreateInput, PremiumSubscriptionUncheckedCreateInput>
  }


  /**
   * PremiumSubscription createMany
   */
  export type PremiumSubscriptionCreateManyArgs = {
    /**
     * The data used to create many PremiumSubscriptions.
     * 
    **/
    data: Enumerable<PremiumSubscriptionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PremiumSubscription update
   */
  export type PremiumSubscriptionUpdateArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * The data needed to update a PremiumSubscription.
     * 
    **/
    data: XOR<PremiumSubscriptionUpdateInput, PremiumSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which PremiumSubscription to update.
     * 
    **/
    where: PremiumSubscriptionWhereUniqueInput
  }


  /**
   * PremiumSubscription updateMany
   */
  export type PremiumSubscriptionUpdateManyArgs = {
    /**
     * The data used to update PremiumSubscriptions.
     * 
    **/
    data: XOR<PremiumSubscriptionUpdateManyMutationInput, PremiumSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which PremiumSubscriptions to update
     * 
    **/
    where?: PremiumSubscriptionWhereInput
  }


  /**
   * PremiumSubscription upsert
   */
  export type PremiumSubscriptionUpsertArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * The filter to search for the PremiumSubscription to update in case it exists.
     * 
    **/
    where: PremiumSubscriptionWhereUniqueInput
    /**
     * In case the PremiumSubscription found by the `where` argument doesn't exist, create a new PremiumSubscription with this data.
     * 
    **/
    create: XOR<PremiumSubscriptionCreateInput, PremiumSubscriptionUncheckedCreateInput>
    /**
     * In case the PremiumSubscription was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PremiumSubscriptionUpdateInput, PremiumSubscriptionUncheckedUpdateInput>
  }


  /**
   * PremiumSubscription delete
   */
  export type PremiumSubscriptionDeleteArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
    /**
     * Filter which PremiumSubscription to delete.
     * 
    **/
    where: PremiumSubscriptionWhereUniqueInput
  }


  /**
   * PremiumSubscription deleteMany
   */
  export type PremiumSubscriptionDeleteManyArgs = {
    /**
     * Filter which PremiumSubscriptions to delete
     * 
    **/
    where?: PremiumSubscriptionWhereInput
  }


  /**
   * PremiumSubscription without action
   */
  export type PremiumSubscriptionArgs = {
    /**
     * Select specific fields to fetch from the PremiumSubscription
     * 
    **/
    select?: PremiumSubscriptionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PremiumSubscriptionInclude | null
  }



  /**
   * Model PremiumPrice
   */


  export type AggregatePremiumPrice = {
    _count: PremiumPriceCountAggregateOutputType | null
    _avg: PremiumPriceAvgAggregateOutputType | null
    _sum: PremiumPriceSumAggregateOutputType | null
    _min: PremiumPriceMinAggregateOutputType | null
    _max: PremiumPriceMaxAggregateOutputType | null
  }

  export type PremiumPriceAvgAggregateOutputType = {
    unitAmount: number | null
    recurringIntervalCount: number | null
  }

  export type PremiumPriceSumAggregateOutputType = {
    unitAmount: number | null
    recurringIntervalCount: number | null
  }

  export type PremiumPriceMinAggregateOutputType = {
    id: string | null
    unitAmount: number | null
    productId: string | null
    active: boolean | null
    currency: string | null
    nickname: string | null
    type: string | null
    recurringInterval: string | null
    recurringIntervalCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PremiumPriceMaxAggregateOutputType = {
    id: string | null
    unitAmount: number | null
    productId: string | null
    active: boolean | null
    currency: string | null
    nickname: string | null
    type: string | null
    recurringInterval: string | null
    recurringIntervalCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PremiumPriceCountAggregateOutputType = {
    id: number
    unitAmount: number
    productId: number
    active: number
    currency: number
    nickname: number
    type: number
    recurringInterval: number
    recurringIntervalCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PremiumPriceAvgAggregateInputType = {
    unitAmount?: true
    recurringIntervalCount?: true
  }

  export type PremiumPriceSumAggregateInputType = {
    unitAmount?: true
    recurringIntervalCount?: true
  }

  export type PremiumPriceMinAggregateInputType = {
    id?: true
    unitAmount?: true
    productId?: true
    active?: true
    currency?: true
    nickname?: true
    type?: true
    recurringInterval?: true
    recurringIntervalCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PremiumPriceMaxAggregateInputType = {
    id?: true
    unitAmount?: true
    productId?: true
    active?: true
    currency?: true
    nickname?: true
    type?: true
    recurringInterval?: true
    recurringIntervalCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PremiumPriceCountAggregateInputType = {
    id?: true
    unitAmount?: true
    productId?: true
    active?: true
    currency?: true
    nickname?: true
    type?: true
    recurringInterval?: true
    recurringIntervalCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PremiumPriceAggregateArgs = {
    /**
     * Filter which PremiumPrice to aggregate.
     * 
    **/
    where?: PremiumPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumPrices to fetch.
     * 
    **/
    orderBy?: Enumerable<PremiumPriceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PremiumPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumPrices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumPrices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PremiumPrices
    **/
    _count?: true | PremiumPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PremiumPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PremiumPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiumPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiumPriceMaxAggregateInputType
  }

  export type GetPremiumPriceAggregateType<T extends PremiumPriceAggregateArgs> = {
        [P in keyof T & keyof AggregatePremiumPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremiumPrice[P]>
      : GetScalarType<T[P], AggregatePremiumPrice[P]>
  }




  export type PremiumPriceGroupByArgs = {
    where?: PremiumPriceWhereInput
    orderBy?: Enumerable<PremiumPriceOrderByWithAggregationInput>
    by: Array<PremiumPriceScalarFieldEnum>
    having?: PremiumPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiumPriceCountAggregateInputType | true
    _avg?: PremiumPriceAvgAggregateInputType
    _sum?: PremiumPriceSumAggregateInputType
    _min?: PremiumPriceMinAggregateInputType
    _max?: PremiumPriceMaxAggregateInputType
  }


  export type PremiumPriceGroupByOutputType = {
    id: string
    unitAmount: number | null
    productId: string
    active: boolean
    currency: string
    nickname: string | null
    type: string
    recurringInterval: string | null
    recurringIntervalCount: number | null
    createdAt: Date
    updatedAt: Date
    _count: PremiumPriceCountAggregateOutputType | null
    _avg: PremiumPriceAvgAggregateOutputType | null
    _sum: PremiumPriceSumAggregateOutputType | null
    _min: PremiumPriceMinAggregateOutputType | null
    _max: PremiumPriceMaxAggregateOutputType | null
  }

  type GetPremiumPriceGroupByPayload<T extends PremiumPriceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PremiumPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiumPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiumPriceGroupByOutputType[P]>
            : GetScalarType<T[P], PremiumPriceGroupByOutputType[P]>
        }
      >
    >


  export type PremiumPriceSelect = {
    id?: boolean
    unitAmount?: boolean
    productId?: boolean
    active?: boolean
    currency?: boolean
    nickname?: boolean
    type?: boolean
    recurringInterval?: boolean
    recurringIntervalCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PremiumPriceGetPayload<
    S extends boolean | null | undefined | PremiumPriceArgs,
    U = keyof S
      > = S extends true
        ? PremiumPrice
    : S extends undefined
    ? never
    : S extends PremiumPriceArgs | PremiumPriceFindManyArgs
    ?'include' extends U
    ? PremiumPrice 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PremiumPrice ? PremiumPrice[P] : never
  } 
    : PremiumPrice
  : PremiumPrice


  type PremiumPriceCountArgs = Merge<
    Omit<PremiumPriceFindManyArgs, 'select' | 'include'> & {
      select?: PremiumPriceCountAggregateInputType | true
    }
  >

  export interface PremiumPriceDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one PremiumPrice that matches the filter.
     * @param {PremiumPriceFindUniqueArgs} args - Arguments to find a PremiumPrice
     * @example
     * // Get one PremiumPrice
     * const premiumPrice = await prisma.premiumPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PremiumPriceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PremiumPriceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PremiumPrice'> extends True ? CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice>, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T>>> : CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice | null >, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T> | null >>

    /**
     * Find the first PremiumPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumPriceFindFirstArgs} args - Arguments to find a PremiumPrice
     * @example
     * // Get one PremiumPrice
     * const premiumPrice = await prisma.premiumPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PremiumPriceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PremiumPriceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PremiumPrice'> extends True ? CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice>, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T>>> : CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice | null >, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T> | null >>

    /**
     * Find zero or more PremiumPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumPriceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PremiumPrices
     * const premiumPrices = await prisma.premiumPrice.findMany()
     * 
     * // Get first 10 PremiumPrices
     * const premiumPrices = await prisma.premiumPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const premiumPriceWithIdOnly = await prisma.premiumPrice.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PremiumPriceFindManyArgs>(
      args?: SelectSubset<T, PremiumPriceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PremiumPrice>>, PrismaPromise<Array<PremiumPriceGetPayload<T>>>>

    /**
     * Create a PremiumPrice.
     * @param {PremiumPriceCreateArgs} args - Arguments to create a PremiumPrice.
     * @example
     * // Create one PremiumPrice
     * const PremiumPrice = await prisma.premiumPrice.create({
     *   data: {
     *     // ... data to create a PremiumPrice
     *   }
     * })
     * 
    **/
    create<T extends PremiumPriceCreateArgs>(
      args: SelectSubset<T, PremiumPriceCreateArgs>
    ): CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice>, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T>>>

    /**
     * Create many PremiumPrices.
     *     @param {PremiumPriceCreateManyArgs} args - Arguments to create many PremiumPrices.
     *     @example
     *     // Create many PremiumPrices
     *     const premiumPrice = await prisma.premiumPrice.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PremiumPriceCreateManyArgs>(
      args?: SelectSubset<T, PremiumPriceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PremiumPrice.
     * @param {PremiumPriceDeleteArgs} args - Arguments to delete one PremiumPrice.
     * @example
     * // Delete one PremiumPrice
     * const PremiumPrice = await prisma.premiumPrice.delete({
     *   where: {
     *     // ... filter to delete one PremiumPrice
     *   }
     * })
     * 
    **/
    delete<T extends PremiumPriceDeleteArgs>(
      args: SelectSubset<T, PremiumPriceDeleteArgs>
    ): CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice>, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T>>>

    /**
     * Update one PremiumPrice.
     * @param {PremiumPriceUpdateArgs} args - Arguments to update one PremiumPrice.
     * @example
     * // Update one PremiumPrice
     * const premiumPrice = await prisma.premiumPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PremiumPriceUpdateArgs>(
      args: SelectSubset<T, PremiumPriceUpdateArgs>
    ): CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice>, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T>>>

    /**
     * Delete zero or more PremiumPrices.
     * @param {PremiumPriceDeleteManyArgs} args - Arguments to filter PremiumPrices to delete.
     * @example
     * // Delete a few PremiumPrices
     * const { count } = await prisma.premiumPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PremiumPriceDeleteManyArgs>(
      args?: SelectSubset<T, PremiumPriceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PremiumPrices
     * const premiumPrice = await prisma.premiumPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PremiumPriceUpdateManyArgs>(
      args: SelectSubset<T, PremiumPriceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PremiumPrice.
     * @param {PremiumPriceUpsertArgs} args - Arguments to update or create a PremiumPrice.
     * @example
     * // Update or create a PremiumPrice
     * const premiumPrice = await prisma.premiumPrice.upsert({
     *   create: {
     *     // ... data to create a PremiumPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PremiumPrice we want to update
     *   }
     * })
    **/
    upsert<T extends PremiumPriceUpsertArgs>(
      args: SelectSubset<T, PremiumPriceUpsertArgs>
    ): CheckSelect<T, Prisma__PremiumPriceClient<PremiumPrice>, Prisma__PremiumPriceClient<PremiumPriceGetPayload<T>>>

    /**
     * Count the number of PremiumPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumPriceCountArgs} args - Arguments to filter PremiumPrices to count.
     * @example
     * // Count the number of PremiumPrices
     * const count = await prisma.premiumPrice.count({
     *   where: {
     *     // ... the filter for the PremiumPrices we want to count
     *   }
     * })
    **/
    count<T extends PremiumPriceCountArgs>(
      args?: Subset<T, PremiumPriceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiumPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PremiumPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiumPriceAggregateArgs>(args: Subset<T, PremiumPriceAggregateArgs>): PrismaPromise<GetPremiumPriceAggregateType<T>>

    /**
     * Group by PremiumPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiumPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiumPriceGroupByArgs['orderBy'] }
        : { orderBy?: PremiumPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiumPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiumPriceGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for PremiumPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PremiumPriceClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * PremiumPrice findUnique
   */
  export type PremiumPriceFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * Throw an Error if a PremiumPrice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PremiumPrice to fetch.
     * 
    **/
    where: PremiumPriceWhereUniqueInput
  }


  /**
   * PremiumPrice findFirst
   */
  export type PremiumPriceFindFirstArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * Throw an Error if a PremiumPrice can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which PremiumPrice to fetch.
     * 
    **/
    where?: PremiumPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumPrices to fetch.
     * 
    **/
    orderBy?: Enumerable<PremiumPriceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumPrices.
     * 
    **/
    cursor?: PremiumPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumPrices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumPrices.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumPrices.
     * 
    **/
    distinct?: Enumerable<PremiumPriceScalarFieldEnum>
  }


  /**
   * PremiumPrice findMany
   */
  export type PremiumPriceFindManyArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * Filter, which PremiumPrices to fetch.
     * 
    **/
    where?: PremiumPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumPrices to fetch.
     * 
    **/
    orderBy?: Enumerable<PremiumPriceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PremiumPrices.
     * 
    **/
    cursor?: PremiumPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumPrices from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumPrices.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PremiumPriceScalarFieldEnum>
  }


  /**
   * PremiumPrice create
   */
  export type PremiumPriceCreateArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * The data needed to create a PremiumPrice.
     * 
    **/
    data: XOR<PremiumPriceCreateInput, PremiumPriceUncheckedCreateInput>
  }


  /**
   * PremiumPrice createMany
   */
  export type PremiumPriceCreateManyArgs = {
    /**
     * The data used to create many PremiumPrices.
     * 
    **/
    data: Enumerable<PremiumPriceCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PremiumPrice update
   */
  export type PremiumPriceUpdateArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * The data needed to update a PremiumPrice.
     * 
    **/
    data: XOR<PremiumPriceUpdateInput, PremiumPriceUncheckedUpdateInput>
    /**
     * Choose, which PremiumPrice to update.
     * 
    **/
    where: PremiumPriceWhereUniqueInput
  }


  /**
   * PremiumPrice updateMany
   */
  export type PremiumPriceUpdateManyArgs = {
    /**
     * The data used to update PremiumPrices.
     * 
    **/
    data: XOR<PremiumPriceUpdateManyMutationInput, PremiumPriceUncheckedUpdateManyInput>
    /**
     * Filter which PremiumPrices to update
     * 
    **/
    where?: PremiumPriceWhereInput
  }


  /**
   * PremiumPrice upsert
   */
  export type PremiumPriceUpsertArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * The filter to search for the PremiumPrice to update in case it exists.
     * 
    **/
    where: PremiumPriceWhereUniqueInput
    /**
     * In case the PremiumPrice found by the `where` argument doesn't exist, create a new PremiumPrice with this data.
     * 
    **/
    create: XOR<PremiumPriceCreateInput, PremiumPriceUncheckedCreateInput>
    /**
     * In case the PremiumPrice was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PremiumPriceUpdateInput, PremiumPriceUncheckedUpdateInput>
  }


  /**
   * PremiumPrice delete
   */
  export type PremiumPriceDeleteArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
    /**
     * Filter which PremiumPrice to delete.
     * 
    **/
    where: PremiumPriceWhereUniqueInput
  }


  /**
   * PremiumPrice deleteMany
   */
  export type PremiumPriceDeleteManyArgs = {
    /**
     * Filter which PremiumPrices to delete
     * 
    **/
    where?: PremiumPriceWhereInput
  }


  /**
   * PremiumPrice without action
   */
  export type PremiumPriceArgs = {
    /**
     * Select specific fields to fetch from the PremiumPrice
     * 
    **/
    select?: PremiumPriceSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    emailVerified: 'emailVerified',
    password: 'password',
    tokenVersion: 'tokenVersion',
    disabled: 'disabled',
    isAdmin: 'isAdmin',
    googleId: 'googleId',
    stripeCustomerId: 'stripeCustomerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    uid: 'uid',
    displayName: 'displayName',
    photoUrl: 'photoUrl',
    googlePhotoUrl: 'googlePhotoUrl',
    themeColor: 'themeColor',
    themeMode: 'themeMode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    categoryId: 'categoryId',
    comment: 'comment',
    integerAmount: 'integerAmount',
    time: 'time',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    scheduleId: 'scheduleId'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const TransactionScheduleScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    categoryId: 'categoryId',
    comment: 'comment',
    integerAmount: 'integerAmount',
    intervalType: 'intervalType',
    intervalEvery: 'intervalEvery',
    firstOccurrence: 'firstOccurrence',
    occurrences: 'occurrences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    latestCreatedOccurrence: 'latestCreatedOccurrence'
  };

  export type TransactionScheduleScalarFieldEnum = (typeof TransactionScheduleScalarFieldEnum)[keyof typeof TransactionScheduleScalarFieldEnum]


  export const BudgetScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    label: 'label',
    integerAmount: 'integerAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    periodMonths: 'periodMonths'
  };

  export type BudgetScalarFieldEnum = (typeof BudgetScalarFieldEnum)[keyof typeof BudgetScalarFieldEnum]


  export const BudgetCategoryInclusionScalarFieldEnum: {
    budgetId: 'budgetId',
    categoryId: 'categoryId'
  };

  export type BudgetCategoryInclusionScalarFieldEnum = (typeof BudgetCategoryInclusionScalarFieldEnum)[keyof typeof BudgetCategoryInclusionScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    value: 'value',
    icon: 'icon',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    message: 'message'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const LogScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    type: 'type',
    message: 'message',
    data: 'data',
    stackTrace: 'stackTrace',
    device: 'device',
    timestamp: 'timestamp',
    timestring: 'timestring',
    createdAt: 'createdAt',
    href: 'href'
  };

  export type LogScalarFieldEnum = (typeof LogScalarFieldEnum)[keyof typeof LogScalarFieldEnum]


  export const ConfigScalarFieldEnum: {
    key: 'key',
    value: 'value'
  };

  export type ConfigScalarFieldEnum = (typeof ConfigScalarFieldEnum)[keyof typeof ConfigScalarFieldEnum]


  export const PremiumSubscriptionScalarFieldEnum: {
    id: 'id',
    uid: 'uid',
    currentPeriodEnd: 'currentPeriodEnd',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PremiumSubscriptionScalarFieldEnum = (typeof PremiumSubscriptionScalarFieldEnum)[keyof typeof PremiumSubscriptionScalarFieldEnum]


  export const PremiumPriceScalarFieldEnum: {
    id: 'id',
    unitAmount: 'unitAmount',
    productId: 'productId',
    active: 'active',
    currency: 'currency',
    nickname: 'nickname',
    type: 'type',
    recurringInterval: 'recurringInterval',
    recurringIntervalCount: 'recurringIntervalCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PremiumPriceScalarFieldEnum = (typeof PremiumPriceScalarFieldEnum)[keyof typeof PremiumPriceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    email?: StringNullableFilter | string | null
    emailVerified?: BoolFilter | boolean
    password?: StringNullableFilter | string | null
    tokenVersion?: IntFilter | number
    disabled?: BoolFilter | boolean
    isAdmin?: BoolFilter | boolean
    googleId?: StringNullableFilter | string | null
    stripeCustomerId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Transactions?: TransactionListRelationFilter
    Categories?: CategoryListRelationFilter
    Budgets?: BudgetListRelationFilter
    Feedback?: FeedbackListRelationFilter
    Profile?: XOR<ProfileRelationFilter, ProfileWhereInput> | null
    Log?: LogListRelationFilter
    TransactionSchedule?: TransactionScheduleListRelationFilter
    Subscription?: XOR<PremiumSubscriptionRelationFilter, PremiumSubscriptionWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    tokenVersion?: SortOrder
    disabled?: SortOrder
    isAdmin?: SortOrder
    googleId?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Transactions?: TransactionOrderByRelationAggregateInput
    Categories?: CategoryOrderByRelationAggregateInput
    Budgets?: BudgetOrderByRelationAggregateInput
    Feedback?: FeedbackOrderByRelationAggregateInput
    Profile?: ProfileOrderByWithRelationInput
    Log?: LogOrderByRelationAggregateInput
    TransactionSchedule?: TransactionScheduleOrderByRelationAggregateInput
    Subscription?: PremiumSubscriptionOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
    googleId?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    tokenVersion?: SortOrder
    disabled?: SortOrder
    isAdmin?: SortOrder
    googleId?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: BoolWithAggregatesFilter | boolean
    password?: StringNullableWithAggregatesFilter | string | null
    tokenVersion?: IntWithAggregatesFilter | number
    disabled?: BoolWithAggregatesFilter | boolean
    isAdmin?: BoolWithAggregatesFilter | boolean
    googleId?: StringNullableWithAggregatesFilter | string | null
    stripeCustomerId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProfileWhereInput = {
    AND?: Enumerable<ProfileWhereInput>
    OR?: Enumerable<ProfileWhereInput>
    NOT?: Enumerable<ProfileWhereInput>
    uid?: StringFilter | string
    displayName?: StringNullableFilter | string | null
    photoUrl?: StringNullableFilter | string | null
    googlePhotoUrl?: StringNullableFilter | string | null
    themeColor?: StringNullableFilter | string | null
    themeMode?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    uid?: SortOrder
    displayName?: SortOrder
    photoUrl?: SortOrder
    googlePhotoUrl?: SortOrder
    themeColor?: SortOrder
    themeMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = {
    uid?: string
  }

  export type ProfileOrderByWithAggregationInput = {
    uid?: SortOrder
    displayName?: SortOrder
    photoUrl?: SortOrder
    googlePhotoUrl?: SortOrder
    themeColor?: SortOrder
    themeMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProfileScalarWhereWithAggregatesInput>
    uid?: StringWithAggregatesFilter | string
    displayName?: StringNullableWithAggregatesFilter | string | null
    photoUrl?: StringNullableWithAggregatesFilter | string | null
    googlePhotoUrl?: StringNullableWithAggregatesFilter | string | null
    themeColor?: StringNullableWithAggregatesFilter | string | null
    themeMode?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    categoryId?: StringFilter | string
    comment?: StringNullableFilter | string | null
    integerAmount?: IntFilter | number
    time?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    scheduleId?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    Schedule?: XOR<TransactionScheduleRelationFilter, TransactionScheduleWhereInput> | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduleId?: SortOrder
    User?: UserOrderByWithRelationInput
    Category?: CategoryOrderByWithRelationInput
    Schedule?: TransactionScheduleOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = {
    id?: string
  }

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduleId?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    categoryId?: StringWithAggregatesFilter | string
    comment?: StringNullableWithAggregatesFilter | string | null
    integerAmount?: IntWithAggregatesFilter | number
    time?: DateTimeWithAggregatesFilter | Date | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    scheduleId?: StringNullableWithAggregatesFilter | string | null
  }

  export type TransactionScheduleWhereInput = {
    AND?: Enumerable<TransactionScheduleWhereInput>
    OR?: Enumerable<TransactionScheduleWhereInput>
    NOT?: Enumerable<TransactionScheduleWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    categoryId?: StringFilter | string
    comment?: StringNullableFilter | string | null
    integerAmount?: IntFilter | number
    intervalType?: EnumIntervalTypeFilter | IntervalType
    intervalEvery?: IntFilter | number
    firstOccurrence?: DateTimeFilter | Date | string
    occurrences?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    latestCreatedOccurrence?: DateTimeNullableFilter | Date | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    Transactions?: TransactionListRelationFilter
  }

  export type TransactionScheduleOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    intervalType?: SortOrder
    intervalEvery?: SortOrder
    firstOccurrence?: SortOrder
    occurrences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    latestCreatedOccurrence?: SortOrder
    User?: UserOrderByWithRelationInput
    Category?: CategoryOrderByWithRelationInput
    Transactions?: TransactionOrderByRelationAggregateInput
  }

  export type TransactionScheduleWhereUniqueInput = {
    id?: string
  }

  export type TransactionScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    intervalType?: SortOrder
    intervalEvery?: SortOrder
    firstOccurrence?: SortOrder
    occurrences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    latestCreatedOccurrence?: SortOrder
    _count?: TransactionScheduleCountOrderByAggregateInput
    _avg?: TransactionScheduleAvgOrderByAggregateInput
    _max?: TransactionScheduleMaxOrderByAggregateInput
    _min?: TransactionScheduleMinOrderByAggregateInput
    _sum?: TransactionScheduleSumOrderByAggregateInput
  }

  export type TransactionScheduleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScheduleScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScheduleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScheduleScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    categoryId?: StringWithAggregatesFilter | string
    comment?: StringNullableWithAggregatesFilter | string | null
    integerAmount?: IntWithAggregatesFilter | number
    intervalType?: EnumIntervalTypeWithAggregatesFilter | IntervalType
    intervalEvery?: IntWithAggregatesFilter | number
    firstOccurrence?: DateTimeWithAggregatesFilter | Date | string
    occurrences?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    latestCreatedOccurrence?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type BudgetWhereInput = {
    AND?: Enumerable<BudgetWhereInput>
    OR?: Enumerable<BudgetWhereInput>
    NOT?: Enumerable<BudgetWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    label?: StringNullableFilter | string | null
    integerAmount?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    periodMonths?: IntFilter | number
    BudgetCategoryInclusions?: BudgetCategoryInclusionListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type BudgetOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    label?: SortOrder
    integerAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    periodMonths?: SortOrder
    BudgetCategoryInclusions?: BudgetCategoryInclusionOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
  }

  export type BudgetWhereUniqueInput = {
    id?: string
  }

  export type BudgetOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    label?: SortOrder
    integerAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    periodMonths?: SortOrder
    _count?: BudgetCountOrderByAggregateInput
    _avg?: BudgetAvgOrderByAggregateInput
    _max?: BudgetMaxOrderByAggregateInput
    _min?: BudgetMinOrderByAggregateInput
    _sum?: BudgetSumOrderByAggregateInput
  }

  export type BudgetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BudgetScalarWhereWithAggregatesInput>
    OR?: Enumerable<BudgetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BudgetScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    label?: StringNullableWithAggregatesFilter | string | null
    integerAmount?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    periodMonths?: IntWithAggregatesFilter | number
  }

  export type BudgetCategoryInclusionWhereInput = {
    AND?: Enumerable<BudgetCategoryInclusionWhereInput>
    OR?: Enumerable<BudgetCategoryInclusionWhereInput>
    NOT?: Enumerable<BudgetCategoryInclusionWhereInput>
    budgetId?: StringFilter | string
    categoryId?: StringFilter | string
    Budget?: XOR<BudgetRelationFilter, BudgetWhereInput>
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
  }

  export type BudgetCategoryInclusionOrderByWithRelationInput = {
    budgetId?: SortOrder
    categoryId?: SortOrder
    Budget?: BudgetOrderByWithRelationInput
    Category?: CategoryOrderByWithRelationInput
  }

  export type BudgetCategoryInclusionWhereUniqueInput = {
    categoryId_budgetId?: BudgetCategoryInclusionCategoryIdBudgetIdCompoundUniqueInput
  }

  export type BudgetCategoryInclusionOrderByWithAggregationInput = {
    budgetId?: SortOrder
    categoryId?: SortOrder
    _count?: BudgetCategoryInclusionCountOrderByAggregateInput
    _max?: BudgetCategoryInclusionMaxOrderByAggregateInput
    _min?: BudgetCategoryInclusionMinOrderByAggregateInput
  }

  export type BudgetCategoryInclusionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BudgetCategoryInclusionScalarWhereWithAggregatesInput>
    OR?: Enumerable<BudgetCategoryInclusionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BudgetCategoryInclusionScalarWhereWithAggregatesInput>
    budgetId?: StringWithAggregatesFilter | string
    categoryId?: StringWithAggregatesFilter | string
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    value?: StringFilter | string
    icon?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    Transactions?: TransactionListRelationFilter
    BudgetCategoryInclusions?: BudgetCategoryInclusionListRelationFilter
    TransactionSchedule?: TransactionScheduleListRelationFilter
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    value?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Transactions?: TransactionOrderByRelationAggregateInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionOrderByRelationAggregateInput
    TransactionSchedule?: TransactionScheduleOrderByRelationAggregateInput
    User?: UserOrderByWithRelationInput
  }

  export type CategoryWhereUniqueInput = {
    id?: string
    unique_uid_value?: CategoryUnique_uid_valueCompoundUniqueInput
    unique_uid_id?: CategoryUnique_uid_idCompoundUniqueInput
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    value?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    value?: StringWithAggregatesFilter | string
    icon?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type FeedbackWhereInput = {
    AND?: Enumerable<FeedbackWhereInput>
    OR?: Enumerable<FeedbackWhereInput>
    NOT?: Enumerable<FeedbackWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    message?: StringNullableFilter | string | null
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    message?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = {
    id?: string
  }

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    message?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FeedbackScalarWhereWithAggregatesInput>
    OR?: Enumerable<FeedbackScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FeedbackScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    message?: StringNullableWithAggregatesFilter | string | null
  }

  export type LogWhereInput = {
    AND?: Enumerable<LogWhereInput>
    OR?: Enumerable<LogWhereInput>
    NOT?: Enumerable<LogWhereInput>
    id?: StringFilter | string
    uid?: StringNullableFilter | string | null
    type?: StringFilter | string
    message?: StringFilter | string
    data?: StringFilter | string
    stackTrace?: StringFilter | string
    device?: StringFilter | string
    timestamp?: IntFilter | number
    timestring?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    href?: StringFilter | string
    User?: XOR<UserRelationFilter, UserWhereInput> | null
  }

  export type LogOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stackTrace?: SortOrder
    device?: SortOrder
    timestamp?: SortOrder
    timestring?: SortOrder
    createdAt?: SortOrder
    href?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type LogWhereUniqueInput = {
    id?: string
  }

  export type LogOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stackTrace?: SortOrder
    device?: SortOrder
    timestamp?: SortOrder
    timestring?: SortOrder
    createdAt?: SortOrder
    href?: SortOrder
    _count?: LogCountOrderByAggregateInput
    _avg?: LogAvgOrderByAggregateInput
    _max?: LogMaxOrderByAggregateInput
    _min?: LogMinOrderByAggregateInput
    _sum?: LogSumOrderByAggregateInput
  }

  export type LogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LogScalarWhereWithAggregatesInput>
    OR?: Enumerable<LogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LogScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringNullableWithAggregatesFilter | string | null
    type?: StringWithAggregatesFilter | string
    message?: StringWithAggregatesFilter | string
    data?: StringWithAggregatesFilter | string
    stackTrace?: StringWithAggregatesFilter | string
    device?: StringWithAggregatesFilter | string
    timestamp?: IntWithAggregatesFilter | number
    timestring?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    href?: StringWithAggregatesFilter | string
  }

  export type ConfigWhereInput = {
    AND?: Enumerable<ConfigWhereInput>
    OR?: Enumerable<ConfigWhereInput>
    NOT?: Enumerable<ConfigWhereInput>
    key?: StringFilter | string
    value?: StringFilter | string
  }

  export type ConfigOrderByWithRelationInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type ConfigWhereUniqueInput = {
    key?: string
  }

  export type ConfigOrderByWithAggregationInput = {
    key?: SortOrder
    value?: SortOrder
    _count?: ConfigCountOrderByAggregateInput
    _max?: ConfigMaxOrderByAggregateInput
    _min?: ConfigMinOrderByAggregateInput
  }

  export type ConfigScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ConfigScalarWhereWithAggregatesInput>
    OR?: Enumerable<ConfigScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ConfigScalarWhereWithAggregatesInput>
    key?: StringWithAggregatesFilter | string
    value?: StringWithAggregatesFilter | string
  }

  export type PremiumSubscriptionWhereInput = {
    AND?: Enumerable<PremiumSubscriptionWhereInput>
    OR?: Enumerable<PremiumSubscriptionWhereInput>
    NOT?: Enumerable<PremiumSubscriptionWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    currentPeriodEnd?: DateTimeNullableFilter | Date | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    User?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type PremiumSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    uid?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    User?: UserOrderByWithRelationInput
  }

  export type PremiumSubscriptionWhereUniqueInput = {
    id?: string
    uid?: string
  }

  export type PremiumSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    uid?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PremiumSubscriptionCountOrderByAggregateInput
    _max?: PremiumSubscriptionMaxOrderByAggregateInput
    _min?: PremiumSubscriptionMinOrderByAggregateInput
  }

  export type PremiumSubscriptionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PremiumSubscriptionScalarWhereWithAggregatesInput>
    OR?: Enumerable<PremiumSubscriptionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PremiumSubscriptionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    uid?: StringWithAggregatesFilter | string
    currentPeriodEnd?: DateTimeNullableWithAggregatesFilter | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PremiumPriceWhereInput = {
    AND?: Enumerable<PremiumPriceWhereInput>
    OR?: Enumerable<PremiumPriceWhereInput>
    NOT?: Enumerable<PremiumPriceWhereInput>
    id?: StringFilter | string
    unitAmount?: IntNullableFilter | number | null
    productId?: StringFilter | string
    active?: BoolFilter | boolean
    currency?: StringFilter | string
    nickname?: StringNullableFilter | string | null
    type?: StringFilter | string
    recurringInterval?: StringNullableFilter | string | null
    recurringIntervalCount?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PremiumPriceOrderByWithRelationInput = {
    id?: SortOrder
    unitAmount?: SortOrder
    productId?: SortOrder
    active?: SortOrder
    currency?: SortOrder
    nickname?: SortOrder
    type?: SortOrder
    recurringInterval?: SortOrder
    recurringIntervalCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumPriceWhereUniqueInput = {
    id?: string
  }

  export type PremiumPriceOrderByWithAggregationInput = {
    id?: SortOrder
    unitAmount?: SortOrder
    productId?: SortOrder
    active?: SortOrder
    currency?: SortOrder
    nickname?: SortOrder
    type?: SortOrder
    recurringInterval?: SortOrder
    recurringIntervalCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PremiumPriceCountOrderByAggregateInput
    _avg?: PremiumPriceAvgOrderByAggregateInput
    _max?: PremiumPriceMaxOrderByAggregateInput
    _min?: PremiumPriceMinOrderByAggregateInput
    _sum?: PremiumPriceSumOrderByAggregateInput
  }

  export type PremiumPriceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PremiumPriceScalarWhereWithAggregatesInput>
    OR?: Enumerable<PremiumPriceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PremiumPriceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    unitAmount?: IntNullableWithAggregatesFilter | number | null
    productId?: StringWithAggregatesFilter | string
    active?: BoolWithAggregatesFilter | boolean
    currency?: StringWithAggregatesFilter | string
    nickname?: StringNullableWithAggregatesFilter | string | null
    type?: StringWithAggregatesFilter | string
    recurringInterval?: StringNullableWithAggregatesFilter | string | null
    recurringIntervalCount?: IntNullableWithAggregatesFilter | number | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type UserCreateManyInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateInput = {
    displayName?: string | null
    photoUrl?: string | null
    googlePhotoUrl?: string | null
    themeColor?: string | null
    themeMode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    uid: string
    displayName?: string | null
    photoUrl?: string | null
    googlePhotoUrl?: string | null
    themeColor?: string | null
    themeMode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateInput = {
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googlePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutProfileInput
  }

  export type ProfileUncheckedUpdateInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googlePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileCreateManyInput = {
    uid: string
    displayName?: string | null
    photoUrl?: string | null
    googlePhotoUrl?: string | null
    themeColor?: string | null
    themeMode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUpdateManyMutationInput = {
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googlePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateManyInput = {
    uid?: StringFieldUpdateOperationsInput | string
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googlePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutTransactionsInput
    Category: CategoryCreateNestedOneWithoutTransactionsInput
    Schedule?: TransactionScheduleCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleId?: string | null
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutTransactionsInput
    Category?: CategoryUpdateOneRequiredWithoutTransactionsInput
    Schedule?: TransactionScheduleUpdateOneWithoutTransactionsInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionCreateManyInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleId?: string | null
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionScheduleCreateInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    User: UserCreateNestedOneWithoutTransactionScheduleInput
    Category: CategoryCreateNestedOneWithoutTransactionScheduleInput
    Transactions?: TransactionCreateNestedManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedCreateInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    Transactions?: TransactionUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type TransactionScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutTransactionScheduleInput
    Category?: CategoryUpdateOneRequiredWithoutTransactionScheduleInput
    Transactions?: TransactionUpdateManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Transactions?: TransactionUncheckedUpdateManyWithoutScheduleInput
  }

  export type TransactionScheduleCreateManyInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
  }

  export type TransactionScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BudgetCreateInput = {
    id?: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
    BudgetCategoryInclusions?: BudgetCategoryInclusionCreateNestedManyWithoutBudgetInput
    User: UserCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetUncheckedCreateInput = {
    id?: string
    uid: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
    BudgetCategoryInclusions?: BudgetCategoryInclusionUpdateManyWithoutBudgetInput
    User?: UserUpdateOneRequiredWithoutBudgetsInput
  }

  export type BudgetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedUpdateManyWithoutBudgetInput
  }

  export type BudgetCreateManyInput = {
    id?: string
    uid: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
  }

  export type BudgetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
  }

  export type BudgetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
  }

  export type BudgetCategoryInclusionCreateInput = {
    Budget: BudgetCreateNestedOneWithoutBudgetCategoryInclusionsInput
    Category: CategoryCreateNestedOneWithoutBudgetCategoryInclusionsInput
  }

  export type BudgetCategoryInclusionUncheckedCreateInput = {
    budgetId: string
    categoryId: string
  }

  export type BudgetCategoryInclusionUpdateInput = {
    Budget?: BudgetUpdateOneRequiredWithoutBudgetCategoryInclusionsInput
    Category?: CategoryUpdateOneRequiredWithoutBudgetCategoryInclusionsInput
  }

  export type BudgetCategoryInclusionUncheckedUpdateInput = {
    budgetId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetCategoryInclusionCreateManyInput = {
    budgetId: string
    categoryId: string
  }

  export type BudgetCategoryInclusionUpdateManyMutationInput = {

  }

  export type BudgetCategoryInclusionUncheckedUpdateManyInput = {
    budgetId?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutCategoryInput
    User: UserCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    uid: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutCategoryInput
    User?: UserUpdateOneRequiredWithoutCategoriesInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutCategoryInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    uid: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateInput = {
    id?: string
    message?: string | null
    User: UserCreateNestedOneWithoutFeedbackInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    uid: string
    message?: string | null
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    User?: UserUpdateOneRequiredWithoutFeedbackInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateManyInput = {
    id?: string
    uid: string
    message?: string | null
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogCreateInput = {
    id?: string
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt?: Date | string
    href: string
    User?: UserCreateNestedOneWithoutLogInput
  }

  export type LogUncheckedCreateInput = {
    id?: string
    uid?: string | null
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt?: Date | string
    href: string
  }

  export type LogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
    User?: UserUpdateOneWithoutLogInput
  }

  export type LogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
  }

  export type LogCreateManyInput = {
    id?: string
    uid?: string | null
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt?: Date | string
    href: string
  }

  export type LogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
  }

  export type LogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
  }

  export type ConfigCreateInput = {
    key: string
    value: string
  }

  export type ConfigUncheckedCreateInput = {
    key: string
    value: string
  }

  export type ConfigUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ConfigUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ConfigCreateManyInput = {
    key: string
    value: string
  }

  export type ConfigUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type ConfigUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
  }

  export type PremiumSubscriptionCreateInput = {
    id?: string
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutSubscriptionInput
  }

  export type PremiumSubscriptionUncheckedCreateInput = {
    id?: string
    uid: string
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutSubscriptionInput
  }

  export type PremiumSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumSubscriptionCreateManyInput = {
    id?: string
    uid: string
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumPriceCreateInput = {
    id: string
    unitAmount?: number | null
    productId: string
    active: boolean
    currency: string
    nickname?: string | null
    type: string
    recurringInterval?: string | null
    recurringIntervalCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumPriceUncheckedCreateInput = {
    id: string
    unitAmount?: number | null
    productId: string
    active: boolean
    currency: string
    nickname?: string | null
    type: string
    recurringInterval?: string | null
    recurringIntervalCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumPriceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currency?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recurringInterval?: NullableStringFieldUpdateOperationsInput | string | null
    recurringIntervalCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumPriceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currency?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recurringInterval?: NullableStringFieldUpdateOperationsInput | string | null
    recurringIntervalCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumPriceCreateManyInput = {
    id: string
    unitAmount?: number | null
    productId: string
    active: boolean
    currency: string
    nickname?: string | null
    type: string
    recurringInterval?: string | null
    recurringIntervalCount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumPriceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currency?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recurringInterval?: NullableStringFieldUpdateOperationsInput | string | null
    recurringIntervalCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumPriceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    unitAmount?: NullableIntFieldUpdateOperationsInput | number | null
    productId?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    currency?: StringFieldUpdateOperationsInput | string
    nickname?: NullableStringFieldUpdateOperationsInput | string | null
    type?: StringFieldUpdateOperationsInput | string
    recurringInterval?: NullableStringFieldUpdateOperationsInput | string | null
    recurringIntervalCount?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type BudgetListRelationFilter = {
    every?: BudgetWhereInput
    some?: BudgetWhereInput
    none?: BudgetWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type ProfileRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type LogListRelationFilter = {
    every?: LogWhereInput
    some?: LogWhereInput
    none?: LogWhereInput
  }

  export type TransactionScheduleListRelationFilter = {
    every?: TransactionScheduleWhereInput
    some?: TransactionScheduleWhereInput
    none?: TransactionScheduleWhereInput
  }

  export type PremiumSubscriptionRelationFilter = {
    is?: PremiumSubscriptionWhereInput | null
    isNot?: PremiumSubscriptionWhereInput | null
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    tokenVersion?: SortOrder
    disabled?: SortOrder
    isAdmin?: SortOrder
    googleId?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    tokenVersion?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    tokenVersion?: SortOrder
    disabled?: SortOrder
    isAdmin?: SortOrder
    googleId?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    password?: SortOrder
    tokenVersion?: SortOrder
    disabled?: SortOrder
    isAdmin?: SortOrder
    googleId?: SortOrder
    stripeCustomerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    tokenVersion?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProfileCountOrderByAggregateInput = {
    uid?: SortOrder
    displayName?: SortOrder
    photoUrl?: SortOrder
    googlePhotoUrl?: SortOrder
    themeColor?: SortOrder
    themeMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    uid?: SortOrder
    displayName?: SortOrder
    photoUrl?: SortOrder
    googlePhotoUrl?: SortOrder
    themeColor?: SortOrder
    themeMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    uid?: SortOrder
    displayName?: SortOrder
    photoUrl?: SortOrder
    googlePhotoUrl?: SortOrder
    themeColor?: SortOrder
    themeMode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type TransactionScheduleRelationFilter = {
    is?: TransactionScheduleWhereInput | null
    isNot?: TransactionScheduleWhereInput | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduleId?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    integerAmount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduleId?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    time?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    scheduleId?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    integerAmount?: SortOrder
  }

  export type EnumIntervalTypeFilter = {
    equals?: IntervalType
    in?: Enumerable<IntervalType>
    notIn?: Enumerable<IntervalType>
    not?: NestedEnumIntervalTypeFilter | IntervalType
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type TransactionScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    intervalType?: SortOrder
    intervalEvery?: SortOrder
    firstOccurrence?: SortOrder
    occurrences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    latestCreatedOccurrence?: SortOrder
  }

  export type TransactionScheduleAvgOrderByAggregateInput = {
    integerAmount?: SortOrder
    intervalEvery?: SortOrder
    occurrences?: SortOrder
  }

  export type TransactionScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    intervalType?: SortOrder
    intervalEvery?: SortOrder
    firstOccurrence?: SortOrder
    occurrences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    latestCreatedOccurrence?: SortOrder
  }

  export type TransactionScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    categoryId?: SortOrder
    comment?: SortOrder
    integerAmount?: SortOrder
    intervalType?: SortOrder
    intervalEvery?: SortOrder
    firstOccurrence?: SortOrder
    occurrences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    latestCreatedOccurrence?: SortOrder
  }

  export type TransactionScheduleSumOrderByAggregateInput = {
    integerAmount?: SortOrder
    intervalEvery?: SortOrder
    occurrences?: SortOrder
  }

  export type EnumIntervalTypeWithAggregatesFilter = {
    equals?: IntervalType
    in?: Enumerable<IntervalType>
    notIn?: Enumerable<IntervalType>
    not?: NestedEnumIntervalTypeWithAggregatesFilter | IntervalType
    _count?: NestedIntFilter
    _min?: NestedEnumIntervalTypeFilter
    _max?: NestedEnumIntervalTypeFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BudgetCategoryInclusionListRelationFilter = {
    every?: BudgetCategoryInclusionWhereInput
    some?: BudgetCategoryInclusionWhereInput
    none?: BudgetCategoryInclusionWhereInput
  }

  export type BudgetCategoryInclusionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BudgetCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    label?: SortOrder
    integerAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    periodMonths?: SortOrder
  }

  export type BudgetAvgOrderByAggregateInput = {
    integerAmount?: SortOrder
    periodMonths?: SortOrder
  }

  export type BudgetMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    label?: SortOrder
    integerAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    periodMonths?: SortOrder
  }

  export type BudgetMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    label?: SortOrder
    integerAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    periodMonths?: SortOrder
  }

  export type BudgetSumOrderByAggregateInput = {
    integerAmount?: SortOrder
    periodMonths?: SortOrder
  }

  export type BudgetRelationFilter = {
    is?: BudgetWhereInput
    isNot?: BudgetWhereInput
  }

  export type BudgetCategoryInclusionCategoryIdBudgetIdCompoundUniqueInput = {
    categoryId: string
    budgetId: string
  }

  export type BudgetCategoryInclusionCountOrderByAggregateInput = {
    budgetId?: SortOrder
    categoryId?: SortOrder
  }

  export type BudgetCategoryInclusionMaxOrderByAggregateInput = {
    budgetId?: SortOrder
    categoryId?: SortOrder
  }

  export type BudgetCategoryInclusionMinOrderByAggregateInput = {
    budgetId?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryUnique_uid_valueCompoundUniqueInput = {
    uid: string
    value: string
  }

  export type CategoryUnique_uid_idCompoundUniqueInput = {
    uid: string
    id: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    value?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    value?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    value?: SortOrder
    icon?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    message?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    message?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    message?: SortOrder
  }

  export type LogCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stackTrace?: SortOrder
    device?: SortOrder
    timestamp?: SortOrder
    timestring?: SortOrder
    createdAt?: SortOrder
    href?: SortOrder
  }

  export type LogAvgOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type LogMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stackTrace?: SortOrder
    device?: SortOrder
    timestamp?: SortOrder
    timestring?: SortOrder
    createdAt?: SortOrder
    href?: SortOrder
  }

  export type LogMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    type?: SortOrder
    message?: SortOrder
    data?: SortOrder
    stackTrace?: SortOrder
    device?: SortOrder
    timestamp?: SortOrder
    timestring?: SortOrder
    createdAt?: SortOrder
    href?: SortOrder
  }

  export type LogSumOrderByAggregateInput = {
    timestamp?: SortOrder
  }

  export type ConfigCountOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type ConfigMaxOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type ConfigMinOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
  }

  export type PremiumSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    uid?: SortOrder
    currentPeriodEnd?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumPriceCountOrderByAggregateInput = {
    id?: SortOrder
    unitAmount?: SortOrder
    productId?: SortOrder
    active?: SortOrder
    currency?: SortOrder
    nickname?: SortOrder
    type?: SortOrder
    recurringInterval?: SortOrder
    recurringIntervalCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumPriceAvgOrderByAggregateInput = {
    unitAmount?: SortOrder
    recurringIntervalCount?: SortOrder
  }

  export type PremiumPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    unitAmount?: SortOrder
    productId?: SortOrder
    active?: SortOrder
    currency?: SortOrder
    nickname?: SortOrder
    type?: SortOrder
    recurringInterval?: SortOrder
    recurringIntervalCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumPriceMinOrderByAggregateInput = {
    id?: SortOrder
    unitAmount?: SortOrder
    productId?: SortOrder
    active?: SortOrder
    currency?: SortOrder
    nickname?: SortOrder
    type?: SortOrder
    recurringInterval?: SortOrder
    recurringIntervalCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PremiumPriceSumOrderByAggregateInput = {
    unitAmount?: SortOrder
    recurringIntervalCount?: SortOrder
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type CategoryCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutUserInput>, Enumerable<CategoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutUserInput>
    createMany?: CategoryCreateManyUserInputEnvelope
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type BudgetCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BudgetCreateWithoutUserInput>, Enumerable<BudgetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BudgetCreateOrConnectWithoutUserInput>
    createMany?: BudgetCreateManyUserInputEnvelope
    connect?: Enumerable<BudgetWhereUniqueInput>
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: Enumerable<FeedbackWhereUniqueInput>
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type LogCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LogCreateWithoutUserInput>, Enumerable<LogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LogCreateOrConnectWithoutUserInput>
    createMany?: LogCreateManyUserInputEnvelope
    connect?: Enumerable<LogWhereUniqueInput>
  }

  export type TransactionScheduleCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutUserInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutUserInput>
    createMany?: TransactionScheduleCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
  }

  export type PremiumSubscriptionCreateNestedOneWithoutUserInput = {
    create?: XOR<PremiumSubscriptionCreateWithoutUserInput, PremiumSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumSubscriptionCreateOrConnectWithoutUserInput
    connect?: PremiumSubscriptionWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type CategoryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutUserInput>, Enumerable<CategoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutUserInput>
    createMany?: CategoryCreateManyUserInputEnvelope
    connect?: Enumerable<CategoryWhereUniqueInput>
  }

  export type BudgetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<BudgetCreateWithoutUserInput>, Enumerable<BudgetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BudgetCreateOrConnectWithoutUserInput>
    createMany?: BudgetCreateManyUserInputEnvelope
    connect?: Enumerable<BudgetWhereUniqueInput>
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: Enumerable<FeedbackWhereUniqueInput>
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type LogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LogCreateWithoutUserInput>, Enumerable<LogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LogCreateOrConnectWithoutUserInput>
    createMany?: LogCreateManyUserInputEnvelope
    connect?: Enumerable<LogWhereUniqueInput>
  }

  export type TransactionScheduleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutUserInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutUserInput>
    createMany?: TransactionScheduleCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
  }

  export type PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PremiumSubscriptionCreateWithoutUserInput, PremiumSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumSubscriptionCreateOrConnectWithoutUserInput
    connect?: PremiumSubscriptionWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TransactionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type CategoryUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutUserInput>, Enumerable<CategoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CategoryCreateManyUserInputEnvelope
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type BudgetUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<BudgetCreateWithoutUserInput>, Enumerable<BudgetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BudgetCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BudgetUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BudgetCreateManyUserInputEnvelope
    set?: Enumerable<BudgetWhereUniqueInput>
    disconnect?: Enumerable<BudgetWhereUniqueInput>
    delete?: Enumerable<BudgetWhereUniqueInput>
    connect?: Enumerable<BudgetWhereUniqueInput>
    update?: Enumerable<BudgetUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BudgetUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BudgetScalarWhereInput>
  }

  export type FeedbackUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FeedbackUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: Enumerable<FeedbackWhereUniqueInput>
    disconnect?: Enumerable<FeedbackWhereUniqueInput>
    delete?: Enumerable<FeedbackWhereUniqueInput>
    connect?: Enumerable<FeedbackWhereUniqueInput>
    update?: Enumerable<FeedbackUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FeedbackUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FeedbackScalarWhereInput>
  }

  export type ProfileUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LogCreateWithoutUserInput>, Enumerable<LogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LogCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LogUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LogCreateManyUserInputEnvelope
    set?: Enumerable<LogWhereUniqueInput>
    disconnect?: Enumerable<LogWhereUniqueInput>
    delete?: Enumerable<LogWhereUniqueInput>
    connect?: Enumerable<LogWhereUniqueInput>
    update?: Enumerable<LogUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LogUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LogScalarWhereInput>
  }

  export type TransactionScheduleUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutUserInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionScheduleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionScheduleCreateManyUserInputEnvelope
    set?: Enumerable<TransactionScheduleWhereUniqueInput>
    disconnect?: Enumerable<TransactionScheduleWhereUniqueInput>
    delete?: Enumerable<TransactionScheduleWhereUniqueInput>
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
    update?: Enumerable<TransactionScheduleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionScheduleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScheduleScalarWhereInput>
  }

  export type PremiumSubscriptionUpdateOneWithoutUserInput = {
    create?: XOR<PremiumSubscriptionCreateWithoutUserInput, PremiumSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumSubscriptionCreateOrConnectWithoutUserInput
    upsert?: PremiumSubscriptionUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: PremiumSubscriptionWhereUniqueInput
    update?: XOR<PremiumSubscriptionUpdateWithoutUserInput, PremiumSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type CategoryUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<CategoryCreateWithoutUserInput>, Enumerable<CategoryUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<CategoryCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<CategoryUpsertWithWhereUniqueWithoutUserInput>
    createMany?: CategoryCreateManyUserInputEnvelope
    set?: Enumerable<CategoryWhereUniqueInput>
    disconnect?: Enumerable<CategoryWhereUniqueInput>
    delete?: Enumerable<CategoryWhereUniqueInput>
    connect?: Enumerable<CategoryWhereUniqueInput>
    update?: Enumerable<CategoryUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CategoryUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CategoryScalarWhereInput>
  }

  export type BudgetUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<BudgetCreateWithoutUserInput>, Enumerable<BudgetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<BudgetCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<BudgetUpsertWithWhereUniqueWithoutUserInput>
    createMany?: BudgetCreateManyUserInputEnvelope
    set?: Enumerable<BudgetWhereUniqueInput>
    disconnect?: Enumerable<BudgetWhereUniqueInput>
    delete?: Enumerable<BudgetWhereUniqueInput>
    connect?: Enumerable<BudgetWhereUniqueInput>
    update?: Enumerable<BudgetUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<BudgetUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<BudgetScalarWhereInput>
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<FeedbackCreateWithoutUserInput>, Enumerable<FeedbackUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<FeedbackCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<FeedbackUpsertWithWhereUniqueWithoutUserInput>
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: Enumerable<FeedbackWhereUniqueInput>
    disconnect?: Enumerable<FeedbackWhereUniqueInput>
    delete?: Enumerable<FeedbackWhereUniqueInput>
    connect?: Enumerable<FeedbackWhereUniqueInput>
    update?: Enumerable<FeedbackUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<FeedbackUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<FeedbackScalarWhereInput>
  }

  export type ProfileUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type LogUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LogCreateWithoutUserInput>, Enumerable<LogUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LogCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LogUpsertWithWhereUniqueWithoutUserInput>
    createMany?: LogCreateManyUserInputEnvelope
    set?: Enumerable<LogWhereUniqueInput>
    disconnect?: Enumerable<LogWhereUniqueInput>
    delete?: Enumerable<LogWhereUniqueInput>
    connect?: Enumerable<LogWhereUniqueInput>
    update?: Enumerable<LogUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LogUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LogScalarWhereInput>
  }

  export type TransactionScheduleUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutUserInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionScheduleUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionScheduleCreateManyUserInputEnvelope
    set?: Enumerable<TransactionScheduleWhereUniqueInput>
    disconnect?: Enumerable<TransactionScheduleWhereUniqueInput>
    delete?: Enumerable<TransactionScheduleWhereUniqueInput>
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
    update?: Enumerable<TransactionScheduleUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionScheduleUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScheduleScalarWhereInput>
  }

  export type PremiumSubscriptionUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<PremiumSubscriptionCreateWithoutUserInput, PremiumSubscriptionUncheckedCreateWithoutUserInput>
    connectOrCreate?: PremiumSubscriptionCreateOrConnectWithoutUserInput
    upsert?: PremiumSubscriptionUpsertWithoutUserInput
    disconnect?: boolean
    delete?: boolean
    connect?: PremiumSubscriptionWhereUniqueInput
    update?: XOR<PremiumSubscriptionUpdateWithoutUserInput, PremiumSubscriptionUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type TransactionScheduleCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<TransactionScheduleCreateWithoutTransactionsInput, TransactionScheduleUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: TransactionScheduleCreateOrConnectWithoutTransactionsInput
    connect?: TransactionScheduleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type CategoryUpdateOneRequiredWithoutTransactionsInput = {
    create?: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionsInput
    upsert?: CategoryUpsertWithoutTransactionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutTransactionsInput, CategoryUncheckedUpdateWithoutTransactionsInput>
  }

  export type TransactionScheduleUpdateOneWithoutTransactionsInput = {
    create?: XOR<TransactionScheduleCreateWithoutTransactionsInput, TransactionScheduleUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: TransactionScheduleCreateOrConnectWithoutTransactionsInput
    upsert?: TransactionScheduleUpsertWithoutTransactionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: TransactionScheduleWhereUniqueInput
    update?: XOR<TransactionScheduleUpdateWithoutTransactionsInput, TransactionScheduleUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserCreateNestedOneWithoutTransactionScheduleInput = {
    create?: XOR<UserCreateWithoutTransactionScheduleInput, UserUncheckedCreateWithoutTransactionScheduleInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionScheduleInput
    connect?: UserWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutTransactionScheduleInput = {
    create?: XOR<CategoryCreateWithoutTransactionScheduleInput, CategoryUncheckedCreateWithoutTransactionScheduleInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionScheduleInput
    connect?: CategoryWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutScheduleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutScheduleInput>, Enumerable<TransactionUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutScheduleInput>
    createMany?: TransactionCreateManyScheduleInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutScheduleInput>, Enumerable<TransactionUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutScheduleInput>
    createMany?: TransactionCreateManyScheduleInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type EnumIntervalTypeFieldUpdateOperationsInput = {
    set?: IntervalType
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutTransactionScheduleInput = {
    create?: XOR<UserCreateWithoutTransactionScheduleInput, UserUncheckedCreateWithoutTransactionScheduleInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionScheduleInput
    upsert?: UserUpsertWithoutTransactionScheduleInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTransactionScheduleInput, UserUncheckedUpdateWithoutTransactionScheduleInput>
  }

  export type CategoryUpdateOneRequiredWithoutTransactionScheduleInput = {
    create?: XOR<CategoryCreateWithoutTransactionScheduleInput, CategoryUncheckedCreateWithoutTransactionScheduleInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutTransactionScheduleInput
    upsert?: CategoryUpsertWithoutTransactionScheduleInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutTransactionScheduleInput, CategoryUncheckedUpdateWithoutTransactionScheduleInput>
  }

  export type TransactionUpdateManyWithoutScheduleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutScheduleInput>, Enumerable<TransactionUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutScheduleInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutScheduleInput>
    createMany?: TransactionCreateManyScheduleInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutScheduleInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutScheduleInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutScheduleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutScheduleInput>, Enumerable<TransactionUncheckedCreateWithoutScheduleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutScheduleInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutScheduleInput>
    createMany?: TransactionCreateManyScheduleInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutScheduleInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutScheduleInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type BudgetCategoryInclusionCreateNestedManyWithoutBudgetInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutBudgetInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutBudgetInput>
    createMany?: BudgetCategoryInclusionCreateManyBudgetInputEnvelope
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutBudgetsInput = {
    create?: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBudgetsInput
    connect?: UserWhereUniqueInput
  }

  export type BudgetCategoryInclusionUncheckedCreateNestedManyWithoutBudgetInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutBudgetInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutBudgetInput>
    createMany?: BudgetCategoryInclusionCreateManyBudgetInputEnvelope
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
  }

  export type BudgetCategoryInclusionUpdateManyWithoutBudgetInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutBudgetInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutBudgetInput>
    upsert?: Enumerable<BudgetCategoryInclusionUpsertWithWhereUniqueWithoutBudgetInput>
    createMany?: BudgetCategoryInclusionCreateManyBudgetInputEnvelope
    set?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    disconnect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    delete?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    update?: Enumerable<BudgetCategoryInclusionUpdateWithWhereUniqueWithoutBudgetInput>
    updateMany?: Enumerable<BudgetCategoryInclusionUpdateManyWithWhereWithoutBudgetInput>
    deleteMany?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutBudgetsInput = {
    create?: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBudgetsInput
    upsert?: UserUpsertWithoutBudgetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutBudgetsInput, UserUncheckedUpdateWithoutBudgetsInput>
  }

  export type BudgetCategoryInclusionUncheckedUpdateManyWithoutBudgetInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutBudgetInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutBudgetInput>
    upsert?: Enumerable<BudgetCategoryInclusionUpsertWithWhereUniqueWithoutBudgetInput>
    createMany?: BudgetCategoryInclusionCreateManyBudgetInputEnvelope
    set?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    disconnect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    delete?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    update?: Enumerable<BudgetCategoryInclusionUpdateWithWhereUniqueWithoutBudgetInput>
    updateMany?: Enumerable<BudgetCategoryInclusionUpdateManyWithWhereWithoutBudgetInput>
    deleteMany?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
  }

  export type BudgetCreateNestedOneWithoutBudgetCategoryInclusionsInput = {
    create?: XOR<BudgetCreateWithoutBudgetCategoryInclusionsInput, BudgetUncheckedCreateWithoutBudgetCategoryInclusionsInput>
    connectOrCreate?: BudgetCreateOrConnectWithoutBudgetCategoryInclusionsInput
    connect?: BudgetWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutBudgetCategoryInclusionsInput = {
    create?: XOR<CategoryCreateWithoutBudgetCategoryInclusionsInput, CategoryUncheckedCreateWithoutBudgetCategoryInclusionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutBudgetCategoryInclusionsInput
    connect?: CategoryWhereUniqueInput
  }

  export type BudgetUpdateOneRequiredWithoutBudgetCategoryInclusionsInput = {
    create?: XOR<BudgetCreateWithoutBudgetCategoryInclusionsInput, BudgetUncheckedCreateWithoutBudgetCategoryInclusionsInput>
    connectOrCreate?: BudgetCreateOrConnectWithoutBudgetCategoryInclusionsInput
    upsert?: BudgetUpsertWithoutBudgetCategoryInclusionsInput
    connect?: BudgetWhereUniqueInput
    update?: XOR<BudgetUpdateWithoutBudgetCategoryInclusionsInput, BudgetUncheckedUpdateWithoutBudgetCategoryInclusionsInput>
  }

  export type CategoryUpdateOneRequiredWithoutBudgetCategoryInclusionsInput = {
    create?: XOR<CategoryCreateWithoutBudgetCategoryInclusionsInput, CategoryUncheckedCreateWithoutBudgetCategoryInclusionsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutBudgetCategoryInclusionsInput
    upsert?: CategoryUpsertWithoutBudgetCategoryInclusionsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutBudgetCategoryInclusionsInput, CategoryUncheckedUpdateWithoutBudgetCategoryInclusionsInput>
  }

  export type TransactionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCategoryInput>, Enumerable<TransactionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCategoryInput>
    createMany?: TransactionCreateManyCategoryInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type BudgetCategoryInclusionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutCategoryInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutCategoryInput>
    createMany?: BudgetCategoryInclusionCreateManyCategoryInputEnvelope
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
  }

  export type TransactionScheduleCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutCategoryInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutCategoryInput>
    createMany?: TransactionScheduleCreateManyCategoryInputEnvelope
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
  }

  export type UserCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriesInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCategoryInput>, Enumerable<TransactionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCategoryInput>
    createMany?: TransactionCreateManyCategoryInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type BudgetCategoryInclusionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutCategoryInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutCategoryInput>
    createMany?: BudgetCategoryInclusionCreateManyCategoryInputEnvelope
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
  }

  export type TransactionScheduleUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutCategoryInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutCategoryInput>
    createMany?: TransactionScheduleCreateManyCategoryInputEnvelope
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
  }

  export type TransactionUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCategoryInput>, Enumerable<TransactionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TransactionCreateManyCategoryInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type BudgetCategoryInclusionUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutCategoryInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BudgetCategoryInclusionUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BudgetCategoryInclusionCreateManyCategoryInputEnvelope
    set?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    disconnect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    delete?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    update?: Enumerable<BudgetCategoryInclusionUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BudgetCategoryInclusionUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
  }

  export type TransactionScheduleUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutCategoryInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TransactionScheduleUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TransactionScheduleCreateManyCategoryInputEnvelope
    set?: Enumerable<TransactionScheduleWhereUniqueInput>
    disconnect?: Enumerable<TransactionScheduleWhereUniqueInput>
    delete?: Enumerable<TransactionScheduleWhereUniqueInput>
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
    update?: Enumerable<TransactionScheduleUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TransactionScheduleUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TransactionScheduleScalarWhereInput>
  }

  export type UserUpdateOneRequiredWithoutCategoriesInput = {
    create?: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriesInput
    upsert?: UserUpsertWithoutCategoriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutCategoriesInput, UserUncheckedUpdateWithoutCategoriesInput>
  }

  export type TransactionUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutCategoryInput>, Enumerable<TransactionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TransactionCreateManyCategoryInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type BudgetCategoryInclusionUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<BudgetCategoryInclusionCreateWithoutCategoryInput>, Enumerable<BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<BudgetCategoryInclusionCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<BudgetCategoryInclusionUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: BudgetCategoryInclusionCreateManyCategoryInputEnvelope
    set?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    disconnect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    delete?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    connect?: Enumerable<BudgetCategoryInclusionWhereUniqueInput>
    update?: Enumerable<BudgetCategoryInclusionUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<BudgetCategoryInclusionUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
  }

  export type TransactionScheduleUncheckedUpdateManyWithoutCategoryInput = {
    create?: XOR<Enumerable<TransactionScheduleCreateWithoutCategoryInput>, Enumerable<TransactionScheduleUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<TransactionScheduleCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<TransactionScheduleUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: TransactionScheduleCreateManyCategoryInputEnvelope
    set?: Enumerable<TransactionScheduleWhereUniqueInput>
    disconnect?: Enumerable<TransactionScheduleWhereUniqueInput>
    delete?: Enumerable<TransactionScheduleWhereUniqueInput>
    connect?: Enumerable<TransactionScheduleWhereUniqueInput>
    update?: Enumerable<TransactionScheduleUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<TransactionScheduleUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<TransactionScheduleScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFeedbackInput = {
    create?: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbackInput
    upsert?: UserUpsertWithoutFeedbackInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
  }

  export type UserCreateNestedOneWithoutLogInput = {
    create?: XOR<UserCreateWithoutLogInput, UserUncheckedCreateWithoutLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutLogInput = {
    create?: XOR<UserCreateWithoutLogInput, UserUncheckedCreateWithoutLogInput>
    connectOrCreate?: UserCreateOrConnectWithoutLogInput
    upsert?: UserUpsertWithoutLogInput
    disconnect?: boolean
    delete?: boolean
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutLogInput, UserUncheckedUpdateWithoutLogInput>
  }

  export type UserCreateNestedOneWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSubscriptionInput = {
    create?: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubscriptionInput
    upsert?: UserUpsertWithoutSubscriptionInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumIntervalTypeFilter = {
    equals?: IntervalType
    in?: Enumerable<IntervalType>
    notIn?: Enumerable<IntervalType>
    not?: NestedEnumIntervalTypeFilter | IntervalType
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedEnumIntervalTypeWithAggregatesFilter = {
    equals?: IntervalType
    in?: Enumerable<IntervalType>
    notIn?: Enumerable<IntervalType>
    not?: NestedEnumIntervalTypeWithAggregatesFilter | IntervalType
    _count?: NestedIntFilter
    _min?: NestedEnumIntervalTypeFilter
    _max?: NestedEnumIntervalTypeFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type TransactionCreateWithoutUserInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    Category: CategoryCreateNestedOneWithoutTransactionsInput
    Schedule?: TransactionScheduleCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleId?: string | null
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: Enumerable<TransactionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutUserInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutUserInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutUserInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput>
  }

  export type CategoryCreateManyUserInputEnvelope = {
    data: Enumerable<CategoryCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type BudgetCreateWithoutUserInput = {
    id?: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
    BudgetCategoryInclusions?: BudgetCategoryInclusionCreateNestedManyWithoutBudgetInput
  }

  export type BudgetUncheckedCreateWithoutUserInput = {
    id?: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedCreateNestedManyWithoutBudgetInput
  }

  export type BudgetCreateOrConnectWithoutUserInput = {
    where: BudgetWhereUniqueInput
    create: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput>
  }

  export type BudgetCreateManyUserInputEnvelope = {
    data: Enumerable<BudgetCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    id?: string
    message?: string | null
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    id?: string
    message?: string | null
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: Enumerable<FeedbackCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    displayName?: string | null
    photoUrl?: string | null
    googlePhotoUrl?: string | null
    themeColor?: string | null
    themeMode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    displayName?: string | null
    photoUrl?: string | null
    googlePhotoUrl?: string | null
    themeColor?: string | null
    themeMode?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type LogCreateWithoutUserInput = {
    id?: string
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt?: Date | string
    href: string
  }

  export type LogUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt?: Date | string
    href: string
  }

  export type LogCreateOrConnectWithoutUserInput = {
    where: LogWhereUniqueInput
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogCreateManyUserInputEnvelope = {
    data: Enumerable<LogCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TransactionScheduleCreateWithoutUserInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    Category: CategoryCreateNestedOneWithoutTransactionScheduleInput
    Transactions?: TransactionCreateNestedManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedCreateWithoutUserInput = {
    id?: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    Transactions?: TransactionUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type TransactionScheduleCreateOrConnectWithoutUserInput = {
    where: TransactionScheduleWhereUniqueInput
    create: XOR<TransactionScheduleCreateWithoutUserInput, TransactionScheduleUncheckedCreateWithoutUserInput>
  }

  export type TransactionScheduleCreateManyUserInputEnvelope = {
    data: Enumerable<TransactionScheduleCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type PremiumSubscriptionCreateWithoutUserInput = {
    id?: string
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumSubscriptionUncheckedCreateWithoutUserInput = {
    id?: string
    currentPeriodEnd?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumSubscriptionCreateOrConnectWithoutUserInput = {
    where: PremiumSubscriptionWhereUniqueInput
    create: XOR<PremiumSubscriptionCreateWithoutUserInput, PremiumSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: Enumerable<TransactionScalarWhereInput>
    OR?: Enumerable<TransactionScalarWhereInput>
    NOT?: Enumerable<TransactionScalarWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    categoryId?: StringFilter | string
    comment?: StringNullableFilter | string | null
    integerAmount?: IntFilter | number
    time?: DateTimeFilter | Date | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    scheduleId?: StringNullableFilter | string | null
  }

  export type CategoryUpsertWithWhereUniqueWithoutUserInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutUserInput, CategoryUncheckedUpdateWithoutUserInput>
    create: XOR<CategoryCreateWithoutUserInput, CategoryUncheckedCreateWithoutUserInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutUserInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutUserInput, CategoryUncheckedUpdateWithoutUserInput>
  }

  export type CategoryUpdateManyWithWhereWithoutUserInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: Enumerable<CategoryScalarWhereInput>
    OR?: Enumerable<CategoryScalarWhereInput>
    NOT?: Enumerable<CategoryScalarWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    value?: StringFilter | string
    icon?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type BudgetUpsertWithWhereUniqueWithoutUserInput = {
    where: BudgetWhereUniqueInput
    update: XOR<BudgetUpdateWithoutUserInput, BudgetUncheckedUpdateWithoutUserInput>
    create: XOR<BudgetCreateWithoutUserInput, BudgetUncheckedCreateWithoutUserInput>
  }

  export type BudgetUpdateWithWhereUniqueWithoutUserInput = {
    where: BudgetWhereUniqueInput
    data: XOR<BudgetUpdateWithoutUserInput, BudgetUncheckedUpdateWithoutUserInput>
  }

  export type BudgetUpdateManyWithWhereWithoutUserInput = {
    where: BudgetScalarWhereInput
    data: XOR<BudgetUpdateManyMutationInput, BudgetUncheckedUpdateManyWithoutBudgetsInput>
  }

  export type BudgetScalarWhereInput = {
    AND?: Enumerable<BudgetScalarWhereInput>
    OR?: Enumerable<BudgetScalarWhereInput>
    NOT?: Enumerable<BudgetScalarWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    label?: StringNullableFilter | string | null
    integerAmount?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    periodMonths?: IntFilter | number
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutFeedbackInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: Enumerable<FeedbackScalarWhereInput>
    OR?: Enumerable<FeedbackScalarWhereInput>
    NOT?: Enumerable<FeedbackScalarWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    message?: StringNullableFilter | string | null
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googlePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    displayName?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    googlePhotoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeColor?: NullableStringFieldUpdateOperationsInput | string | null
    themeMode?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LogUpsertWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    update: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
    create: XOR<LogCreateWithoutUserInput, LogUncheckedCreateWithoutUserInput>
  }

  export type LogUpdateWithWhereUniqueWithoutUserInput = {
    where: LogWhereUniqueInput
    data: XOR<LogUpdateWithoutUserInput, LogUncheckedUpdateWithoutUserInput>
  }

  export type LogUpdateManyWithWhereWithoutUserInput = {
    where: LogScalarWhereInput
    data: XOR<LogUpdateManyMutationInput, LogUncheckedUpdateManyWithoutLogInput>
  }

  export type LogScalarWhereInput = {
    AND?: Enumerable<LogScalarWhereInput>
    OR?: Enumerable<LogScalarWhereInput>
    NOT?: Enumerable<LogScalarWhereInput>
    id?: StringFilter | string
    uid?: StringNullableFilter | string | null
    type?: StringFilter | string
    message?: StringFilter | string
    data?: StringFilter | string
    stackTrace?: StringFilter | string
    device?: StringFilter | string
    timestamp?: IntFilter | number
    timestring?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    href?: StringFilter | string
  }

  export type TransactionScheduleUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionScheduleWhereUniqueInput
    update: XOR<TransactionScheduleUpdateWithoutUserInput, TransactionScheduleUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionScheduleCreateWithoutUserInput, TransactionScheduleUncheckedCreateWithoutUserInput>
  }

  export type TransactionScheduleUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionScheduleWhereUniqueInput
    data: XOR<TransactionScheduleUpdateWithoutUserInput, TransactionScheduleUncheckedUpdateWithoutUserInput>
  }

  export type TransactionScheduleUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScheduleScalarWhereInput
    data: XOR<TransactionScheduleUpdateManyMutationInput, TransactionScheduleUncheckedUpdateManyWithoutTransactionScheduleInput>
  }

  export type TransactionScheduleScalarWhereInput = {
    AND?: Enumerable<TransactionScheduleScalarWhereInput>
    OR?: Enumerable<TransactionScheduleScalarWhereInput>
    NOT?: Enumerable<TransactionScheduleScalarWhereInput>
    id?: StringFilter | string
    uid?: StringFilter | string
    categoryId?: StringFilter | string
    comment?: StringNullableFilter | string | null
    integerAmount?: IntFilter | number
    intervalType?: EnumIntervalTypeFilter | IntervalType
    intervalEvery?: IntFilter | number
    firstOccurrence?: DateTimeFilter | Date | string
    occurrences?: IntNullableFilter | number | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    latestCreatedOccurrence?: DateTimeNullableFilter | Date | string | null
  }

  export type PremiumSubscriptionUpsertWithoutUserInput = {
    update: XOR<PremiumSubscriptionUpdateWithoutUserInput, PremiumSubscriptionUncheckedUpdateWithoutUserInput>
    create: XOR<PremiumSubscriptionCreateWithoutUserInput, PremiumSubscriptionUncheckedCreateWithoutUserInput>
  }

  export type PremiumSubscriptionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumSubscriptionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    currentPeriodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type UserCreateWithoutTransactionsInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type CategoryCreateWithoutTransactionsInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    BudgetCategoryInclusions?: BudgetCategoryInclusionCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutCategoryInput
    User: UserCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutTransactionsInput = {
    id?: string
    uid: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutTransactionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
  }

  export type TransactionScheduleCreateWithoutTransactionsInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    User: UserCreateNestedOneWithoutTransactionScheduleInput
    Category: CategoryCreateNestedOneWithoutTransactionScheduleInput
  }

  export type TransactionScheduleUncheckedCreateWithoutTransactionsInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
  }

  export type TransactionScheduleCreateOrConnectWithoutTransactionsInput = {
    where: TransactionScheduleWhereUniqueInput
    create: XOR<TransactionScheduleCreateWithoutTransactionsInput, TransactionScheduleUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type CategoryUpsertWithoutTransactionsInput = {
    update: XOR<CategoryUpdateWithoutTransactionsInput, CategoryUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CategoryCreateWithoutTransactionsInput, CategoryUncheckedCreateWithoutTransactionsInput>
  }

  export type CategoryUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BudgetCategoryInclusions?: BudgetCategoryInclusionUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutCategoryInput
    User?: UserUpdateOneRequiredWithoutCategoriesInput
  }

  export type CategoryUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutCategoryInput
  }

  export type TransactionScheduleUpsertWithoutTransactionsInput = {
    update: XOR<TransactionScheduleUpdateWithoutTransactionsInput, TransactionScheduleUncheckedUpdateWithoutTransactionsInput>
    create: XOR<TransactionScheduleCreateWithoutTransactionsInput, TransactionScheduleUncheckedCreateWithoutTransactionsInput>
  }

  export type TransactionScheduleUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutTransactionScheduleInput
    Category?: CategoryUpdateOneRequiredWithoutTransactionScheduleInput
  }

  export type TransactionScheduleUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutTransactionScheduleInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionScheduleInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionScheduleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionScheduleInput, UserUncheckedCreateWithoutTransactionScheduleInput>
  }

  export type CategoryCreateWithoutTransactionScheduleInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionCreateNestedManyWithoutCategoryInput
    User: UserCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutTransactionScheduleInput = {
    id?: string
    uid: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutTransactionScheduleInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutTransactionScheduleInput, CategoryUncheckedCreateWithoutTransactionScheduleInput>
  }

  export type TransactionCreateWithoutScheduleInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutTransactionsInput
    Category: CategoryCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutScheduleInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutScheduleInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutScheduleInput, TransactionUncheckedCreateWithoutScheduleInput>
  }

  export type TransactionCreateManyScheduleInputEnvelope = {
    data: Enumerable<TransactionCreateManyScheduleInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutTransactionScheduleInput = {
    update: XOR<UserUpdateWithoutTransactionScheduleInput, UserUncheckedUpdateWithoutTransactionScheduleInput>
    create: XOR<UserCreateWithoutTransactionScheduleInput, UserUncheckedCreateWithoutTransactionScheduleInput>
  }

  export type UserUpdateWithoutTransactionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTransactionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type CategoryUpsertWithoutTransactionScheduleInput = {
    update: XOR<CategoryUpdateWithoutTransactionScheduleInput, CategoryUncheckedUpdateWithoutTransactionScheduleInput>
    create: XOR<CategoryCreateWithoutTransactionScheduleInput, CategoryUncheckedCreateWithoutTransactionScheduleInput>
  }

  export type CategoryUpdateWithoutTransactionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUpdateManyWithoutCategoryInput
    User?: UserUpdateOneRequiredWithoutCategoriesInput
  }

  export type CategoryUncheckedUpdateWithoutTransactionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedUpdateManyWithoutCategoryInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutScheduleInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutScheduleInput, TransactionUncheckedUpdateWithoutScheduleInput>
    create: XOR<TransactionCreateWithoutScheduleInput, TransactionUncheckedCreateWithoutScheduleInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutScheduleInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutScheduleInput, TransactionUncheckedUpdateWithoutScheduleInput>
  }

  export type TransactionUpdateManyWithWhereWithoutScheduleInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type BudgetCategoryInclusionCreateWithoutBudgetInput = {
    Category: CategoryCreateNestedOneWithoutBudgetCategoryInclusionsInput
  }

  export type BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput = {
    categoryId: string
  }

  export type BudgetCategoryInclusionCreateOrConnectWithoutBudgetInput = {
    where: BudgetCategoryInclusionWhereUniqueInput
    create: XOR<BudgetCategoryInclusionCreateWithoutBudgetInput, BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput>
  }

  export type BudgetCategoryInclusionCreateManyBudgetInputEnvelope = {
    data: Enumerable<BudgetCategoryInclusionCreateManyBudgetInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutBudgetsInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBudgetsInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBudgetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
  }

  export type BudgetCategoryInclusionUpsertWithWhereUniqueWithoutBudgetInput = {
    where: BudgetCategoryInclusionWhereUniqueInput
    update: XOR<BudgetCategoryInclusionUpdateWithoutBudgetInput, BudgetCategoryInclusionUncheckedUpdateWithoutBudgetInput>
    create: XOR<BudgetCategoryInclusionCreateWithoutBudgetInput, BudgetCategoryInclusionUncheckedCreateWithoutBudgetInput>
  }

  export type BudgetCategoryInclusionUpdateWithWhereUniqueWithoutBudgetInput = {
    where: BudgetCategoryInclusionWhereUniqueInput
    data: XOR<BudgetCategoryInclusionUpdateWithoutBudgetInput, BudgetCategoryInclusionUncheckedUpdateWithoutBudgetInput>
  }

  export type BudgetCategoryInclusionUpdateManyWithWhereWithoutBudgetInput = {
    where: BudgetCategoryInclusionScalarWhereInput
    data: XOR<BudgetCategoryInclusionUpdateManyMutationInput, BudgetCategoryInclusionUncheckedUpdateManyWithoutBudgetCategoryInclusionsInput>
  }

  export type BudgetCategoryInclusionScalarWhereInput = {
    AND?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
    OR?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
    NOT?: Enumerable<BudgetCategoryInclusionScalarWhereInput>
    budgetId?: StringFilter | string
    categoryId?: StringFilter | string
  }

  export type UserUpsertWithoutBudgetsInput = {
    update: XOR<UserUpdateWithoutBudgetsInput, UserUncheckedUpdateWithoutBudgetsInput>
    create: XOR<UserCreateWithoutBudgetsInput, UserUncheckedCreateWithoutBudgetsInput>
  }

  export type UserUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type BudgetCreateWithoutBudgetCategoryInclusionsInput = {
    id?: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
    User: UserCreateNestedOneWithoutBudgetsInput
  }

  export type BudgetUncheckedCreateWithoutBudgetCategoryInclusionsInput = {
    id?: string
    uid: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
  }

  export type BudgetCreateOrConnectWithoutBudgetCategoryInclusionsInput = {
    where: BudgetWhereUniqueInput
    create: XOR<BudgetCreateWithoutBudgetCategoryInclusionsInput, BudgetUncheckedCreateWithoutBudgetCategoryInclusionsInput>
  }

  export type CategoryCreateWithoutBudgetCategoryInclusionsInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutCategoryInput
    User: UserCreateNestedOneWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutBudgetCategoryInclusionsInput = {
    id?: string
    uid: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutBudgetCategoryInclusionsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutBudgetCategoryInclusionsInput, CategoryUncheckedCreateWithoutBudgetCategoryInclusionsInput>
  }

  export type BudgetUpsertWithoutBudgetCategoryInclusionsInput = {
    update: XOR<BudgetUpdateWithoutBudgetCategoryInclusionsInput, BudgetUncheckedUpdateWithoutBudgetCategoryInclusionsInput>
    create: XOR<BudgetCreateWithoutBudgetCategoryInclusionsInput, BudgetUncheckedCreateWithoutBudgetCategoryInclusionsInput>
  }

  export type BudgetUpdateWithoutBudgetCategoryInclusionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
    User?: UserUpdateOneRequiredWithoutBudgetsInput
  }

  export type BudgetUncheckedUpdateWithoutBudgetCategoryInclusionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUpsertWithoutBudgetCategoryInclusionsInput = {
    update: XOR<CategoryUpdateWithoutBudgetCategoryInclusionsInput, CategoryUncheckedUpdateWithoutBudgetCategoryInclusionsInput>
    create: XOR<CategoryCreateWithoutBudgetCategoryInclusionsInput, CategoryUncheckedCreateWithoutBudgetCategoryInclusionsInput>
  }

  export type CategoryUpdateWithoutBudgetCategoryInclusionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutCategoryInput
    User?: UserUpdateOneRequiredWithoutCategoriesInput
  }

  export type CategoryUncheckedUpdateWithoutBudgetCategoryInclusionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutCategoryInput
  }

  export type TransactionCreateWithoutCategoryInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    User: UserCreateNestedOneWithoutTransactionsInput
    Schedule?: TransactionScheduleCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCategoryInput = {
    id?: string
    uid: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleId?: string | null
  }

  export type TransactionCreateOrConnectWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionCreateManyCategoryInputEnvelope = {
    data: Enumerable<TransactionCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type BudgetCategoryInclusionCreateWithoutCategoryInput = {
    Budget: BudgetCreateNestedOneWithoutBudgetCategoryInclusionsInput
  }

  export type BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput = {
    budgetId: string
  }

  export type BudgetCategoryInclusionCreateOrConnectWithoutCategoryInput = {
    where: BudgetCategoryInclusionWhereUniqueInput
    create: XOR<BudgetCategoryInclusionCreateWithoutCategoryInput, BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput>
  }

  export type BudgetCategoryInclusionCreateManyCategoryInputEnvelope = {
    data: Enumerable<BudgetCategoryInclusionCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type TransactionScheduleCreateWithoutCategoryInput = {
    id?: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    User: UserCreateNestedOneWithoutTransactionScheduleInput
    Transactions?: TransactionCreateNestedManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedCreateWithoutCategoryInput = {
    id?: string
    uid: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
    Transactions?: TransactionUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type TransactionScheduleCreateOrConnectWithoutCategoryInput = {
    where: TransactionScheduleWhereUniqueInput
    create: XOR<TransactionScheduleCreateWithoutCategoryInput, TransactionScheduleUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionScheduleCreateManyCategoryInputEnvelope = {
    data: Enumerable<TransactionScheduleCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCategoriesInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoriesInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
  }

  export type TransactionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCategoryInput, TransactionUncheckedUpdateWithoutCategoryInput>
    create: XOR<TransactionCreateWithoutCategoryInput, TransactionUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCategoryInput, TransactionUncheckedUpdateWithoutCategoryInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCategoryInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type BudgetCategoryInclusionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: BudgetCategoryInclusionWhereUniqueInput
    update: XOR<BudgetCategoryInclusionUpdateWithoutCategoryInput, BudgetCategoryInclusionUncheckedUpdateWithoutCategoryInput>
    create: XOR<BudgetCategoryInclusionCreateWithoutCategoryInput, BudgetCategoryInclusionUncheckedCreateWithoutCategoryInput>
  }

  export type BudgetCategoryInclusionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: BudgetCategoryInclusionWhereUniqueInput
    data: XOR<BudgetCategoryInclusionUpdateWithoutCategoryInput, BudgetCategoryInclusionUncheckedUpdateWithoutCategoryInput>
  }

  export type BudgetCategoryInclusionUpdateManyWithWhereWithoutCategoryInput = {
    where: BudgetCategoryInclusionScalarWhereInput
    data: XOR<BudgetCategoryInclusionUpdateManyMutationInput, BudgetCategoryInclusionUncheckedUpdateManyWithoutBudgetCategoryInclusionsInput>
  }

  export type TransactionScheduleUpsertWithWhereUniqueWithoutCategoryInput = {
    where: TransactionScheduleWhereUniqueInput
    update: XOR<TransactionScheduleUpdateWithoutCategoryInput, TransactionScheduleUncheckedUpdateWithoutCategoryInput>
    create: XOR<TransactionScheduleCreateWithoutCategoryInput, TransactionScheduleUncheckedCreateWithoutCategoryInput>
  }

  export type TransactionScheduleUpdateWithWhereUniqueWithoutCategoryInput = {
    where: TransactionScheduleWhereUniqueInput
    data: XOR<TransactionScheduleUpdateWithoutCategoryInput, TransactionScheduleUncheckedUpdateWithoutCategoryInput>
  }

  export type TransactionScheduleUpdateManyWithWhereWithoutCategoryInput = {
    where: TransactionScheduleScalarWhereInput
    data: XOR<TransactionScheduleUpdateManyMutationInput, TransactionScheduleUncheckedUpdateManyWithoutTransactionScheduleInput>
  }

  export type UserUpsertWithoutCategoriesInput = {
    update: XOR<UserUpdateWithoutCategoriesInput, UserUncheckedUpdateWithoutCategoriesInput>
    create: XOR<UserCreateWithoutCategoriesInput, UserUncheckedCreateWithoutCategoriesInput>
  }

  export type UserUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type UserCreateWithoutFeedbackInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbackInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbackInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpsertWithoutFeedbackInput = {
    update: XOR<UserUpdateWithoutFeedbackInput, UserUncheckedUpdateWithoutFeedbackInput>
    create: XOR<UserCreateWithoutFeedbackInput, UserUncheckedCreateWithoutFeedbackInput>
  }

  export type UserUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type UserCreateWithoutLogInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLogInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLogInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLogInput, UserUncheckedCreateWithoutLogInput>
  }

  export type UserUpsertWithoutLogInput = {
    update: XOR<UserUpdateWithoutLogInput, UserUncheckedUpdateWithoutLogInput>
    create: XOR<UserCreateWithoutLogInput, UserUncheckedCreateWithoutLogInput>
  }

  export type UserUpdateWithoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
    Subscription?: PremiumSubscriptionUncheckedUpdateOneWithoutUserInput
  }

  export type UserCreateWithoutSubscriptionInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionCreateNestedManyWithoutUserInput
    Categories?: CategoryCreateNestedManyWithoutUserInput
    Budgets?: BudgetCreateNestedManyWithoutUserInput
    Feedback?: FeedbackCreateNestedManyWithoutUserInput
    Profile?: ProfileCreateNestedOneWithoutUserInput
    Log?: LogCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    email?: string | null
    emailVerified?: boolean
    password?: string | null
    tokenVersion?: number
    disabled?: boolean
    isAdmin?: boolean
    googleId?: string | null
    stripeCustomerId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    Categories?: CategoryUncheckedCreateNestedManyWithoutUserInput
    Budgets?: BudgetUncheckedCreateNestedManyWithoutUserInput
    Feedback?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    Profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    Log?: LogUncheckedCreateNestedManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubscriptionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserUpsertWithoutSubscriptionInput = {
    update: XOR<UserUpdateWithoutSubscriptionInput, UserUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<UserCreateWithoutSubscriptionInput, UserUncheckedCreateWithoutSubscriptionInput>
  }

  export type UserUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutUserInput
    Categories?: CategoryUpdateManyWithoutUserInput
    Budgets?: BudgetUpdateManyWithoutUserInput
    Feedback?: FeedbackUpdateManyWithoutUserInput
    Profile?: ProfileUpdateOneWithoutUserInput
    Log?: LogUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    password?: NullableStringFieldUpdateOperationsInput | string | null
    tokenVersion?: IntFieldUpdateOperationsInput | number
    disabled?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    googleId?: NullableStringFieldUpdateOperationsInput | string | null
    stripeCustomerId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    Categories?: CategoryUncheckedUpdateManyWithoutUserInput
    Budgets?: BudgetUncheckedUpdateManyWithoutUserInput
    Feedback?: FeedbackUncheckedUpdateManyWithoutUserInput
    Profile?: ProfileUncheckedUpdateOneWithoutUserInput
    Log?: LogUncheckedUpdateManyWithoutUserInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutUserInput
  }

  export type TransactionCreateManyUserInput = {
    id?: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleId?: string | null
  }

  export type CategoryCreateManyUserInput = {
    id?: string
    value: string
    icon?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BudgetCreateManyUserInput = {
    id?: string
    label?: string | null
    integerAmount: number
    createdAt?: Date | string
    updatedAt?: Date | string
    periodMonths?: number
  }

  export type FeedbackCreateManyUserInput = {
    id?: string
    message?: string | null
  }

  export type LogCreateManyUserInput = {
    id?: string
    type: string
    message: string
    data: string
    stackTrace: string
    device: string
    timestamp: number
    timestring: string
    createdAt?: Date | string
    href: string
  }

  export type TransactionScheduleCreateManyUserInput = {
    id?: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
  }

  export type TransactionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Category?: CategoryUpdateOneRequiredWithoutTransactionsInput
    Schedule?: TransactionScheduleUpdateOneWithoutTransactionsInput
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUpdateManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Transactions?: TransactionUncheckedUpdateManyWithoutCategoryInput
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedUpdateManyWithoutCategoryInput
    TransactionSchedule?: TransactionScheduleUncheckedUpdateManyWithoutCategoryInput
  }

  export type CategoryUncheckedUpdateManyWithoutCategoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    icon?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
    BudgetCategoryInclusions?: BudgetCategoryInclusionUpdateManyWithoutBudgetInput
  }

  export type BudgetUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
    BudgetCategoryInclusions?: BudgetCategoryInclusionUncheckedUpdateManyWithoutBudgetInput
  }

  export type BudgetUncheckedUpdateManyWithoutBudgetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    label?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    periodMonths?: IntFieldUpdateOperationsInput | number
  }

  export type FeedbackUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyWithoutFeedbackInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
  }

  export type LogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
  }

  export type LogUncheckedUpdateManyWithoutLogInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    stackTrace?: StringFieldUpdateOperationsInput | string
    device?: StringFieldUpdateOperationsInput | string
    timestamp?: IntFieldUpdateOperationsInput | number
    timestring?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    href?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionScheduleUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Category?: CategoryUpdateOneRequiredWithoutTransactionScheduleInput
    Transactions?: TransactionUpdateManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Transactions?: TransactionUncheckedUpdateManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedUpdateManyWithoutTransactionScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionCreateManyScheduleInput = {
    id?: string
    uid: string
    categoryId: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutTransactionsInput
    Category?: CategoryUpdateOneRequiredWithoutTransactionsInput
  }

  export type TransactionUncheckedUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BudgetCategoryInclusionCreateManyBudgetInput = {
    categoryId: string
  }

  export type BudgetCategoryInclusionUpdateWithoutBudgetInput = {
    Category?: CategoryUpdateOneRequiredWithoutBudgetCategoryInclusionsInput
  }

  export type BudgetCategoryInclusionUncheckedUpdateWithoutBudgetInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type BudgetCategoryInclusionUncheckedUpdateManyWithoutBudgetCategoryInclusionsInput = {
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateManyCategoryInput = {
    id?: string
    uid: string
    comment?: string | null
    integerAmount: number
    time: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    scheduleId?: string | null
  }

  export type BudgetCategoryInclusionCreateManyCategoryInput = {
    budgetId: string
  }

  export type TransactionScheduleCreateManyCategoryInput = {
    id?: string
    uid: string
    comment?: string | null
    integerAmount: number
    intervalType: IntervalType
    intervalEvery?: number
    firstOccurrence: Date | string
    occurrences?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    latestCreatedOccurrence?: Date | string | null
  }

  export type TransactionUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    User?: UserUpdateOneRequiredWithoutTransactionsInput
    Schedule?: TransactionScheduleUpdateOneWithoutTransactionsInput
  }

  export type TransactionUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BudgetCategoryInclusionUpdateWithoutCategoryInput = {
    Budget?: BudgetUpdateOneRequiredWithoutBudgetCategoryInclusionsInput
  }

  export type BudgetCategoryInclusionUncheckedUpdateWithoutCategoryInput = {
    budgetId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionScheduleUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    User?: UserUpdateOneRequiredWithoutTransactionScheduleInput
    Transactions?: TransactionUpdateManyWithoutScheduleInput
  }

  export type TransactionScheduleUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    uid?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    integerAmount?: IntFieldUpdateOperationsInput | number
    intervalType?: EnumIntervalTypeFieldUpdateOperationsInput | IntervalType
    intervalEvery?: IntFieldUpdateOperationsInput | number
    firstOccurrence?: DateTimeFieldUpdateOperationsInput | Date | string
    occurrences?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    latestCreatedOccurrence?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Transactions?: TransactionUncheckedUpdateManyWithoutScheduleInput
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}