generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@internal/prisma-next-prod/prisma/client"
}

datasource postgresql {
  provider = "postgresql"
  url      = env("PREV_DATABASE_URL")
}

// User model, contains the most important details about the user
model DbUser {
  id               String   @id @default(uuid())
  email            String?  @unique
  emailVerified    Boolean  @default(false) @map("email_verified")
  password         String?
  tokenVersion     Int      @default(1) @map("token_version")
  disabled         Boolean  @default(false)
  isAdmin          Boolean  @default(false) @map("is_admin")
  googleId         String?  @unique @map("google_id")
  stripeCustomerId String?  @map("stripe_customer_id")
  displayName      String?  @map("display_name")
  photoUrl         String?  @map("photo_url")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")

  Transactions        DbTransaction[]
  Categories          DbCategory[]
  Feedback            DbFeedback[]
  TransactionSchedule DbTransactionSchedule[]
  Preferences         DbUserPreference[]

  @@map(name: "users")
}

// User preferences
model DbUserPreference {
  uid   String
  key   String
  value String

  User DbUser @relation(fields: [uid], references: [id])

  @@id([uid, key])
  @@map(name: "user_preferences")
}

// User owned transaction, with all necessary details and references to
// a category and a potential schedule by which it was created
model DbTransaction {
  id            String   @id @default(uuid())
  uid           String
  categoryId    String   @map("category_id")
  comment       String?
  integerAmount Int      @map("integer_amount")
  time          DateTime
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  scheduleId    String?  @map("schedule_id")

  User     DbUser                 @relation(fields: [uid], references: [id])
  Category DbCategory             @relation(fields: [categoryId], references: [id])
  Schedule DbTransactionSchedule? @relation(fields: [scheduleId], references: [id])

  @@map(name: "transactions")
}

// Transaction schedules which contain information about the schedule and the
// template for a transaction and are used for creating transactions on a
// schedule
model DbTransactionSchedule {
  id                      String       @id @default(uuid())
  uid                     String
  categoryId              String       @map("category_id")
  comment                 String?
  integerAmount           Int          @map("integer_amount")
  intervalType            IntervalType @map("interval_type")
  intervalEvery           Int          @default(1) @map("interval_every")
  firstOccurrence         DateTime     @map("first_occurrence")
  occurrences             Int?
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @default(now()) @updatedAt @map("updated_at")
  latestCreatedOccurrence DateTime?    @map("latest_created_occurrence")

  User         DbUser          @relation(fields: [uid], references: [id])
  Category     DbCategory      @relation(fields: [categoryId], references: [id])
  Transactions DbTransaction[]

  @@map(name: "transaction_schedules")
}

// Interval type for schedules
enum IntervalType {
  DAY
  WEEK
  MONTH
  YEAR
}

// Each transaction has a category and this model stores information about a
// category and enables all items of the same category to refer to a singular
// category object
model DbCategory {
  id        String   @id @default(uuid())
  uid       String
  value     String
  icon      String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  Transactions        DbTransaction[]
  TransactionSchedule DbTransactionSchedule[]

  User DbUser @relation(fields: [uid], references: [id])

  @@unique([uid, value], name: "unique_uid_value")
  @@unique([uid, id], name: "unique_uid_id")
  @@map(name: "categories")
}

// All feedback items, contain a message
model DbFeedback {
  id      String  @id @default(uuid())
  uid     String
  message String?

  User DbUser @relation(fields: [uid], references: [id])

  @@map(name: "feedback")
}

// All config key-value items
model DbConfig {
  key   String @id
  value String

  @@map(name: "configs")
}

// All premium price items, copied from stripe with their important detials
model DbPremiumPrice {
  id                     String   @id
  unitAmount             Int?     @map("unit_amount")
  productId              String   @map("product_id")
  active                 Boolean
  currency               String
  nickname               String?
  type                   String
  recurringInterval      String?  @map("recurring_interval")
  recurringIntervalCount Int?     @map("recurring_interval_count")
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "premium_prices")
}

// All scheduled tasks, contain the tasks ID and when it was last ran
model DbScheduledTask {
  id        String   @id
  latest    DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map(name: "scheduled_tasks")
}
